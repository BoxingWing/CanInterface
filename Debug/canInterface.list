
canInterface.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08006fb0  08006fb0  00016fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007200  08007200  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007208  08007208  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  20000014  08007224  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  2000034c  08007224  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018038  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002804  00000000  00000000  0003807c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001468  00000000  00000000  0003a880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0003bce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026850  00000000  00000000  0003d068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168c5  00000000  00000000  000638b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff442  00000000  00000000  0007a17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001795bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058d8  00000000  00000000  00179610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f98 	.word	0x08006f98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08006f98 	.word	0x08006f98

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <unpack_reply>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void unpack_reply(FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *data)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
 8000524:	6039      	str	r1, [r7, #0]
	//if (pRxHeader->DataLength == FDCAN_DLC_BYTES_8)
	{
		int i;
		uint32_t recID=pRxHeader->Identifier;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	61bb      	str	r3, [r7, #24]
		if (recID==0x145)
 800052c:	69bb      	ldr	r3, [r7, #24]
 800052e:	f240 1245 	movw	r2, #325	; 0x145
 8000532:	4293      	cmp	r3, r2
 8000534:	f040 80c5 	bne.w	80006c2 <unpack_reply+0x1a6>
		{
			for (i=0;i<4;i++)
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
 800053c:	e00b      	b.n	8000556 <unpack_reply+0x3a>
				txData[i]=spiTxDataBuff[i];
 800053e:	4a67      	ldr	r2, [pc, #412]	; (80006dc <unpack_reply+0x1c0>)
 8000540:	69fb      	ldr	r3, [r7, #28]
 8000542:	4413      	add	r3, r2
 8000544:	7819      	ldrb	r1, [r3, #0]
 8000546:	4a66      	ldr	r2, [pc, #408]	; (80006e0 <unpack_reply+0x1c4>)
 8000548:	69fb      	ldr	r3, [r7, #28]
 800054a:	4413      	add	r3, r2
 800054c:	460a      	mov	r2, r1
 800054e:	701a      	strb	r2, [r3, #0]
			for (i=0;i<4;i++)
 8000550:	69fb      	ldr	r3, [r7, #28]
 8000552:	3301      	adds	r3, #1
 8000554:	61fb      	str	r3, [r7, #28]
 8000556:	69fb      	ldr	r3, [r7, #28]
 8000558:	2b03      	cmp	r3, #3
 800055a:	ddf0      	ble.n	800053e <unpack_reply+0x22>

			if (rxData[0]==1)
 800055c:	4b61      	ldr	r3, [pc, #388]	; (80006e4 <unpack_reply+0x1c8>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d103      	bne.n	800056c <unpack_reply+0x50>
				torEnFlag=1;
 8000564:	4b60      	ldr	r3, [pc, #384]	; (80006e8 <unpack_reply+0x1cc>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
 800056a:	e002      	b.n	8000572 <unpack_reply+0x56>
			else
				torEnFlag=0;
 800056c:	4b5e      	ldr	r3, [pc, #376]	; (80006e8 <unpack_reply+0x1cc>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]

			uint8_t returnMsg[13];
			returnMsg[0]=0xff;
 8000572:	23ff      	movs	r3, #255	; 0xff
 8000574:	723b      	strb	r3, [r7, #8]
			returnMsg[1]=0xff;
 8000576:	23ff      	movs	r3, #255	; 0xff
 8000578:	727b      	strb	r3, [r7, #9]
			returnMsg[2]=0xfd;
 800057a:	23fd      	movs	r3, #253	; 0xfd
 800057c:	72bb      	strb	r3, [r7, #10]
			returnMsg[3]=0; // reserved
 800057e:	2300      	movs	r3, #0
 8000580:	72fb      	strb	r3, [r7, #11]
			returnMsg[4]=1; // device ID
 8000582:	2301      	movs	r3, #1
 8000584:	733b      	strb	r3, [r7, #12]
			returnMsg[5]=6; // low byte of length
 8000586:	2306      	movs	r3, #6
 8000588:	737b      	strb	r3, [r7, #13]
			returnMsg[6]=0; // high byte of length
 800058a:	2300      	movs	r3, #0
 800058c:	73bb      	strb	r3, [r7, #14]
			returnMsg[7]=3; // instruction code
 800058e:	2303      	movs	r3, #3
 8000590:	73fb      	strb	r3, [r7, #15]
			returnMsg[8]=68; // Low byte reg address
 8000592:	2344      	movs	r3, #68	; 0x44
 8000594:	743b      	strb	r3, [r7, #16]
			returnMsg[9]=0x00; // high byte reg address
 8000596:	2300      	movs	r3, #0
 8000598:	747b      	strb	r3, [r7, #17]
			returnMsg[10]=1; // para bytes
 800059a:	2301      	movs	r3, #1
 800059c:	74bb      	strb	r3, [r7, #18]
			returnMsg[11]=0xde; //low byte of CRC
 800059e:	23de      	movs	r3, #222	; 0xde
 80005a0:	74fb      	strb	r3, [r7, #19]
			returnMsg[12]=0; // high byte of CRC
 80005a2:	2300      	movs	r3, #0
 80005a4:	753b      	strb	r3, [r7, #20]
			unsigned short crc16;
			crc16=update_crc(0, returnMsg, 11);
 80005a6:	f107 0308 	add.w	r3, r7, #8
 80005aa:	220b      	movs	r2, #11
 80005ac:	4619      	mov	r1, r3
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 febc 	bl	800132c <update_crc>
 80005b4:	4603      	mov	r3, r0
 80005b6:	82fb      	strh	r3, [r7, #22]
			returnMsg[11]= crc16 & 0x00ff;
 80005b8:	8afb      	ldrh	r3, [r7, #22]
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	74fb      	strb	r3, [r7, #19]
			returnMsg[12] = (crc16>>8) & 0x00ff;
 80005be:	8afb      	ldrh	r3, [r7, #22]
 80005c0:	0a1b      	lsrs	r3, r3, #8
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	753b      	strb	r3, [r7, #20]

			if (rxData[0]==2)
 80005c8:	4b46      	ldr	r3, [pc, #280]	; (80006e4 <unpack_reply+0x1c8>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	d133      	bne.n	8000638 <unpack_reply+0x11c>
			{
				HAL_UART_Abort(&huart1);
 80005d0:	4846      	ldr	r0, [pc, #280]	; (80006ec <unpack_reply+0x1d0>)
 80005d2:	f005 f80a 	bl	80055ea <HAL_UART_Abort>
				HAL_UART_DMAStop(&huart1);
 80005d6:	4845      	ldr	r0, [pc, #276]	; (80006ec <unpack_reply+0x1d0>)
 80005d8:	f004 ff74 	bl	80054c4 <HAL_UART_DMAStop>

				//MX_DMA_Init();
				HAL_Delay(100);
 80005dc:	2064      	movs	r0, #100	; 0x64
 80005de:	f001 f993 	bl	8001908 <HAL_Delay>
				HAL_UART_Transmit(&huart1,returnMsg,13,2); // disable response data for write cmd
 80005e2:	f107 0108 	add.w	r1, r7, #8
 80005e6:	2302      	movs	r3, #2
 80005e8:	220d      	movs	r2, #13
 80005ea:	4840      	ldr	r0, [pc, #256]	; (80006ec <unpack_reply+0x1d0>)
 80005ec:	f004 fe7e 	bl	80052ec <HAL_UART_Transmit>
				HAL_Delay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f001 f989 	bl	8001908 <HAL_Delay>
				for (i=0;i<15;i++)
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
 80005fa:	e007      	b.n	800060c <unpack_reply+0xf0>
					dmaBuff[i]=0;
 80005fc:	4a3c      	ldr	r2, [pc, #240]	; (80006f0 <unpack_reply+0x1d4>)
 80005fe:	69fb      	ldr	r3, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	2200      	movs	r2, #0
 8000604:	701a      	strb	r2, [r3, #0]
				for (i=0;i<15;i++)
 8000606:	69fb      	ldr	r3, [r7, #28]
 8000608:	3301      	adds	r3, #1
 800060a:	61fb      	str	r3, [r7, #28]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b0e      	cmp	r3, #14
 8000610:	ddf4      	ble.n	80005fc <unpack_reply+0xe0>
				for (i=0;i<30;i++)
 8000612:	2300      	movs	r3, #0
 8000614:	61fb      	str	r3, [r7, #28]
 8000616:	e007      	b.n	8000628 <unpack_reply+0x10c>
					FBposBuff[i]=0;
 8000618:	4a36      	ldr	r2, [pc, #216]	; (80006f4 <unpack_reply+0x1d8>)
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	4413      	add	r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
				for (i=0;i<30;i++)
 8000622:	69fb      	ldr	r3, [r7, #28]
 8000624:	3301      	adds	r3, #1
 8000626:	61fb      	str	r3, [r7, #28]
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	2b1d      	cmp	r3, #29
 800062c:	ddf4      	ble.n	8000618 <unpack_reply+0xfc>
				HAL_UART_Receive_DMA(&huart1, dmaBuff, 15);
 800062e:	220f      	movs	r2, #15
 8000630:	492f      	ldr	r1, [pc, #188]	; (80006f0 <unpack_reply+0x1d4>)
 8000632:	482e      	ldr	r0, [pc, #184]	; (80006ec <unpack_reply+0x1d0>)
 8000634:	f004 fef0 	bl	8005418 <HAL_UART_Receive_DMA>
			}

			desPos[0]=rxData[2]; // little-endian
 8000638:	4b2a      	ldr	r3, [pc, #168]	; (80006e4 <unpack_reply+0x1c8>)
 800063a:	789a      	ldrb	r2, [r3, #2]
 800063c:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <unpack_reply+0x1dc>)
 800063e:	701a      	strb	r2, [r3, #0]
			desPos[1]=rxData[3];
 8000640:	4b28      	ldr	r3, [pc, #160]	; (80006e4 <unpack_reply+0x1c8>)
 8000642:	78da      	ldrb	r2, [r3, #3]
 8000644:	4b2c      	ldr	r3, [pc, #176]	; (80006f8 <unpack_reply+0x1dc>)
 8000646:	705a      	strb	r2, [r3, #1]
			desPos[2]=rxData[4];
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <unpack_reply+0x1c8>)
 800064a:	791a      	ldrb	r2, [r3, #4]
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <unpack_reply+0x1dc>)
 800064e:	709a      	strb	r2, [r3, #2]
			desPos[3]=rxData[5];
 8000650:	4b24      	ldr	r3, [pc, #144]	; (80006e4 <unpack_reply+0x1c8>)
 8000652:	795a      	ldrb	r2, [r3, #5]
 8000654:	4b28      	ldr	r3, [pc, #160]	; (80006f8 <unpack_reply+0x1dc>)
 8000656:	70da      	strb	r2, [r3, #3]

			for (i=0;i<16;i++)
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
 800065c:	e014      	b.n	8000688 <unpack_reply+0x16c>
			{if (FBposBuff[i]==0xff && FBposBuff[i+1]==0xff && FBposBuff[i+2]==0xfd)
 800065e:	4a25      	ldr	r2, [pc, #148]	; (80006f4 <unpack_reply+0x1d8>)
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	4413      	add	r3, r2
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2bff      	cmp	r3, #255	; 0xff
 8000668:	d10b      	bne.n	8000682 <unpack_reply+0x166>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3301      	adds	r3, #1
 800066e:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <unpack_reply+0x1d8>)
 8000670:	5cd3      	ldrb	r3, [r2, r3]
 8000672:	2bff      	cmp	r3, #255	; 0xff
 8000674:	d105      	bne.n	8000682 <unpack_reply+0x166>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	3302      	adds	r3, #2
 800067a:	4a1e      	ldr	r2, [pc, #120]	; (80006f4 <unpack_reply+0x1d8>)
 800067c:	5cd3      	ldrb	r3, [r2, r3]
 800067e:	2bfd      	cmp	r3, #253	; 0xfd
 8000680:	d006      	beq.n	8000690 <unpack_reply+0x174>
			for (i=0;i<16;i++)
 8000682:	69fb      	ldr	r3, [r7, #28]
 8000684:	3301      	adds	r3, #1
 8000686:	61fb      	str	r3, [r7, #28]
 8000688:	69fb      	ldr	r3, [r7, #28]
 800068a:	2b0f      	cmp	r3, #15
 800068c:	dde7      	ble.n	800065e <unpack_reply+0x142>
 800068e:	e000      	b.n	8000692 <unpack_reply+0x176>
					break;
 8000690:	bf00      	nop
			}
			txData[4]=FBposBuff[i+9];
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	3309      	adds	r3, #9
 8000696:	4a17      	ldr	r2, [pc, #92]	; (80006f4 <unpack_reply+0x1d8>)
 8000698:	5cd2      	ldrb	r2, [r2, r3]
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <unpack_reply+0x1c4>)
 800069c:	711a      	strb	r2, [r3, #4]
			txData[5]=FBposBuff[i+10];
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	330a      	adds	r3, #10
 80006a2:	4a14      	ldr	r2, [pc, #80]	; (80006f4 <unpack_reply+0x1d8>)
 80006a4:	5cd2      	ldrb	r2, [r2, r3]
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <unpack_reply+0x1c4>)
 80006a8:	715a      	strb	r2, [r3, #5]
			txData[6]=FBposBuff[i+11];
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	330b      	adds	r3, #11
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <unpack_reply+0x1d8>)
 80006b0:	5cd2      	ldrb	r2, [r2, r3]
 80006b2:	4b0b      	ldr	r3, [pc, #44]	; (80006e0 <unpack_reply+0x1c4>)
 80006b4:	719a      	strb	r2, [r3, #6]
			txData[7]=FBposBuff[i+12];
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	330c      	adds	r3, #12
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <unpack_reply+0x1d8>)
 80006bc:	5cd2      	ldrb	r2, [r2, r3]
 80006be:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <unpack_reply+0x1c4>)
 80006c0:	71da      	strb	r2, [r3, #7]
		}
		TxHeader.Identifier=recID;
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <unpack_reply+0x1e0>)
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	6013      	str	r3, [r2, #0]
		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, txData);
 80006c8:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <unpack_reply+0x1c4>)
 80006ca:	490c      	ldr	r1, [pc, #48]	; (80006fc <unpack_reply+0x1e0>)
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <unpack_reply+0x1e4>)
 80006ce:	f001 ff98 	bl	8002602 <HAL_FDCAN_AddMessageToTxFifoQ>
	}

}
 80006d2:	bf00      	nop
 80006d4:	3720      	adds	r7, #32
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000300 	.word	0x20000300
 80006e0:	200002cc 	.word	0x200002cc
 80006e4:	200002d4 	.word	0x200002d4
 80006e8:	2000033e 	.word	0x2000033e
 80006ec:	20000190 	.word	0x20000190
 80006f0:	20000310 	.word	0x20000310
 80006f4:	20000320 	.word	0x20000320
 80006f8:	20000340 	.word	0x20000340
 80006fc:	20000280 	.word	0x20000280
 8000700:	20000030 	.word	0x20000030

08000704 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if (htim==&htim2)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a09      	ldr	r2, [pc, #36]	; (8000734 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d108      	bne.n	8000726 <HAL_TIM_PeriodElapsedCallback+0x22>
		{trigger1msFlag=1;trigger3msFlag++;}
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x38>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000724:	701a      	strb	r2, [r3, #0]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	200000f8 	.word	0x200000f8
 8000738:	200002dc 	.word	0x200002dc
 800073c:	200002dd 	.word	0x200002dd

08000740 <delay_us>:
void delay_us(uint16_t nus)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <delay_us+0x30>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < nus) ;
 8000752:	bf00      	nop
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <delay_us+0x30>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800075a:	88fb      	ldrh	r3, [r7, #6]
 800075c:	429a      	cmp	r2, r3
 800075e:	d3f9      	bcc.n	8000754 <delay_us+0x14>
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000144 	.word	0x20000144

08000774 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <HAL_UART_RxCpltCallback+0x68>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d123      	bne.n	80007ce <HAL_UART_RxCpltCallback+0x5a>
	int i;
/*	for (i=15;i<30;i++)
		FBposBuff[i]=FBposBuff[i-15];
	for (i=0;i<15;i++)
		FBposBuff[i]=dmaBuff[i]; */
	for (i=0;i<15;i++)
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	e00b      	b.n	80007a4 <HAL_UART_RxCpltCallback+0x30>
			FBposBuff[i]=FBposBuff[i+15];
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	330f      	adds	r3, #15
 8000790:	4a13      	ldr	r2, [pc, #76]	; (80007e0 <HAL_UART_RxCpltCallback+0x6c>)
 8000792:	5cd1      	ldrb	r1, [r2, r3]
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <HAL_UART_RxCpltCallback+0x6c>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	4413      	add	r3, r2
 800079a:	460a      	mov	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
	for (i=0;i<15;i++)
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	3301      	adds	r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b0e      	cmp	r3, #14
 80007a8:	ddf0      	ble.n	800078c <HAL_UART_RxCpltCallback+0x18>
	for (i=15;i<30;i++)
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	e00b      	b.n	80007c8 <HAL_UART_RxCpltCallback+0x54>
		FBposBuff[i]=dmaBuff[i-15];
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3b0f      	subs	r3, #15
 80007b4:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <HAL_UART_RxCpltCallback+0x70>)
 80007b6:	5cd1      	ldrb	r1, [r2, r3]
 80007b8:	4a09      	ldr	r2, [pc, #36]	; (80007e0 <HAL_UART_RxCpltCallback+0x6c>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4413      	add	r3, r2
 80007be:	460a      	mov	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
	for (i=15;i<30;i++)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2b1d      	cmp	r3, #29
 80007cc:	ddf0      	ble.n	80007b0 <HAL_UART_RxCpltCallback+0x3c>
	}

}
 80007ce:	bf00      	nop
 80007d0:	3714      	adds	r7, #20
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	40013800 	.word	0x40013800
 80007e0:	20000320 	.word	0x20000320
 80007e4:	20000310 	.word	0x20000310

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b09a      	sub	sp, #104	; 0x68
 80007ec:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  TxHeader.Identifier=0x144;
 80007ee:	4bd1      	ldr	r3, [pc, #836]	; (8000b34 <main+0x34c>)
 80007f0:	f44f 72a2 	mov.w	r2, #324	; 0x144
 80007f4:	601a      	str	r2, [r3, #0]
  TxHeader.IdType=FDCAN_STANDARD_ID;
 80007f6:	4bcf      	ldr	r3, [pc, #828]	; (8000b34 <main+0x34c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType=FDCAN_DATA_FRAME;
 80007fc:	4bcd      	ldr	r3, [pc, #820]	; (8000b34 <main+0x34c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000802:	4bcc      	ldr	r3, [pc, #816]	; (8000b34 <main+0x34c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  TxHeader.DataLength=FDCAN_DLC_BYTES_8;
 8000808:	4bca      	ldr	r3, [pc, #808]	; (8000b34 <main+0x34c>)
 800080a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800080e:	60da      	str	r2, [r3, #12]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000810:	4bc8      	ldr	r3, [pc, #800]	; (8000b34 <main+0x34c>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat=FDCAN_CLASSIC_CAN;
 8000816:	4bc7      	ldr	r3, [pc, #796]	; (8000b34 <main+0x34c>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 800081c:	4bc5      	ldr	r3, [pc, #788]	; (8000b34 <main+0x34c>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker=0;
 8000822:	4bc4      	ldr	r3, [pc, #784]	; (8000b34 <main+0x34c>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000828:	f000 fffd 	bl	8001826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082c:	f000 fada 	bl	8000de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000830:	f000 fcde 	bl	80011f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000834:	f000 fcb2 	bl	800119c <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000838:	f000 fb20 	bl	8000e7c <MX_FDCAN1_Init>
  MX_SPI1_Init();
 800083c:	f000 fb86 	bl	8000f4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000840:	f000 fc5e 	bl	8001100 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000844:	f000 fbc0 	bl	8000fc8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000848:	f000 fc0c 	bl	8001064 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	48b9      	ldr	r0, [pc, #740]	; (8000b38 <main+0x350>)
 8000852:	f002 fa7d 	bl	8002d50 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	48b7      	ldr	r0, [pc, #732]	; (8000b38 <main+0x350>)
 800085c:	f002 fa78 	bl	8002d50 <HAL_GPIO_WritePin>
  trigger1msFlag=0;
 8000860:	4bb6      	ldr	r3, [pc, #728]	; (8000b3c <main+0x354>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]

  HAL_Delay(2000);
 8000866:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800086a:	f001 f84d 	bl	8001908 <HAL_Delay>
  torEnFlag=0;
 800086e:	4bb4      	ldr	r3, [pc, #720]	; (8000b40 <main+0x358>)
 8000870:	2200      	movs	r2, #0
 8000872:	701a      	strb	r2, [r3, #0]
  torEnFlagOld=0;
 8000874:	4bb3      	ldr	r3, [pc, #716]	; (8000b44 <main+0x35c>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]

  uint8_t torEn[13];
  torEn[0]=0xff;
 800087a:	23ff      	movs	r3, #255	; 0xff
 800087c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  torEn[1]=0xff;
 8000880:	23ff      	movs	r3, #255	; 0xff
 8000882:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  torEn[2]=0xfd;
 8000886:	23fd      	movs	r3, #253	; 0xfd
 8000888:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  torEn[3]=0; // reserved
 800088c:	2300      	movs	r3, #0
 800088e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  torEn[4]=1; // device ID
 8000892:	2301      	movs	r3, #1
 8000894:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  torEn[5]=6; // low byte of length
 8000898:	2306      	movs	r3, #6
 800089a:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  torEn[6]=0; // high byte of length
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  torEn[7]=3; // instruction code
 80008a4:	2303      	movs	r3, #3
 80008a6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  torEn[8]=0x40; // Low byte reg address
 80008aa:	2340      	movs	r3, #64	; 0x40
 80008ac:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  torEn[9]=0x00; // high byte reg address
 80008b0:	2300      	movs	r3, #0
 80008b2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
  torEn[10]=1; // para bytes
 80008b6:	2301      	movs	r3, #1
 80008b8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
  torEn[11]=0xde; //low byte of CRC
 80008bc:	23de      	movs	r3, #222	; 0xde
 80008be:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  torEn[12]=0; // high byte of CRC
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  unsigned short crc16;
  crc16=update_crc(0, torEn, 11);
 80008c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008cc:	220b      	movs	r2, #11
 80008ce:	4619      	mov	r1, r3
 80008d0:	2000      	movs	r0, #0
 80008d2:	f000 fd2b 	bl	800132c <update_crc>
 80008d6:	4603      	mov	r3, r0
 80008d8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  torEn[11]= crc16 & 0x00ff;
 80008dc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  torEn[12] = (crc16>>8) & 0x00ff;
 80008e6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80008ea:	0a1b      	lsrs	r3, r3, #8
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  //HAL_UART_Transmit(&huart1,torEn,13,2); // enable torque output

  uint8_t torDis[13];
  torDis[0]=0xff;
 80008f4:	23ff      	movs	r3, #255	; 0xff
 80008f6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  torDis[1]=0xff;
 80008fa:	23ff      	movs	r3, #255	; 0xff
 80008fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  torDis[2]=0xfd;
 8000900:	23fd      	movs	r3, #253	; 0xfd
 8000902:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  torDis[3]=0; // reserved
 8000906:	2300      	movs	r3, #0
 8000908:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  torDis[4]=1; // device ID
 800090c:	2301      	movs	r3, #1
 800090e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  torDis[5]=6; // low byte of length
 8000912:	2306      	movs	r3, #6
 8000914:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  torDis[6]=0; // high byte of length
 8000918:	2300      	movs	r3, #0
 800091a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  torDis[7]=3; // instruction code
 800091e:	2303      	movs	r3, #3
 8000920:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  torDis[8]=0x40; // Low byte reg address
 8000924:	2340      	movs	r3, #64	; 0x40
 8000926:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  torDis[9]=0x00; // high byte reg address
 800092a:	2300      	movs	r3, #0
 800092c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  torDis[10]=0; // para bytes
 8000930:	2300      	movs	r3, #0
 8000932:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  torDis[11]=0xde; //low byte of CRC
 8000936:	23de      	movs	r3, #222	; 0xde
 8000938:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  torDis[12]=0; // high byte of CRC
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
  crc16=update_crc(0, torDis, 11);
 8000942:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000946:	220b      	movs	r2, #11
 8000948:	4619      	mov	r1, r3
 800094a:	2000      	movs	r0, #0
 800094c:	f000 fcee 	bl	800132c <update_crc>
 8000950:	4603      	mov	r3, r0
 8000952:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  torDis[11]= crc16 & 0x00ff;
 8000956:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800095a:	b2db      	uxtb	r3, r3
 800095c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  torDis[12] = (crc16>>8) & 0x00ff;
 8000960:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2db      	uxtb	r3, r3
 800096a:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

  uint8_t returnMsg[13];
  returnMsg[0]=0xff;
 800096e:	23ff      	movs	r3, #255	; 0xff
 8000970:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  returnMsg[1]=0xff;
 8000974:	23ff      	movs	r3, #255	; 0xff
 8000976:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  returnMsg[2]=0xfd;
 800097a:	23fd      	movs	r3, #253	; 0xfd
 800097c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  returnMsg[3]=0; // reserved
 8000980:	2300      	movs	r3, #0
 8000982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  returnMsg[4]=1; // device ID
 8000986:	2301      	movs	r3, #1
 8000988:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  returnMsg[5]=6; // low byte of length
 800098c:	2306      	movs	r3, #6
 800098e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  returnMsg[6]=0; // high byte of length
 8000992:	2300      	movs	r3, #0
 8000994:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  returnMsg[7]=3; // instruction code
 8000998:	2303      	movs	r3, #3
 800099a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  returnMsg[8]=68; // Low byte reg address
 800099e:	2344      	movs	r3, #68	; 0x44
 80009a0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  returnMsg[9]=0x00; // high byte reg address
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  returnMsg[10]=1; // para bytes
 80009aa:	2301      	movs	r3, #1
 80009ac:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  returnMsg[11]=0xde; //low byte of CRC
 80009b0:	23de      	movs	r3, #222	; 0xde
 80009b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  returnMsg[12]=0; // high byte of CRC
 80009b6:	2300      	movs	r3, #0
 80009b8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  crc16=update_crc(0, returnMsg, 11);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	220b      	movs	r2, #11
 80009c2:	4619      	mov	r1, r3
 80009c4:	2000      	movs	r0, #0
 80009c6:	f000 fcb1 	bl	800132c <update_crc>
 80009ca:	4603      	mov	r3, r0
 80009cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  returnMsg[11]= crc16 & 0x00ff;
 80009d0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  returnMsg[12] = (crc16>>8) & 0x00ff;
 80009da:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80009de:	0a1b      	lsrs	r3, r3, #8
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  HAL_UART_Transmit(&huart1,returnMsg,13,2); // disable response data for write cmd
 80009e8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80009ec:	2302      	movs	r3, #2
 80009ee:	220d      	movs	r2, #13
 80009f0:	4855      	ldr	r0, [pc, #340]	; (8000b48 <main+0x360>)
 80009f2:	f004 fc7b 	bl	80052ec <HAL_UART_Transmit>

  HAL_UART_Receive_DMA(&huart1, dmaBuff, 15);
 80009f6:	220f      	movs	r2, #15
 80009f8:	4954      	ldr	r1, [pc, #336]	; (8000b4c <main+0x364>)
 80009fa:	4853      	ldr	r0, [pc, #332]	; (8000b48 <main+0x360>)
 80009fc:	f004 fd0c 	bl	8005418 <HAL_UART_Receive_DMA>

  uint8_t getCurPos[14];
  getCurPos[0]=0xff;
 8000a00:	23ff      	movs	r3, #255	; 0xff
 8000a02:	753b      	strb	r3, [r7, #20]
  getCurPos[1]=0xff;
 8000a04:	23ff      	movs	r3, #255	; 0xff
 8000a06:	757b      	strb	r3, [r7, #21]
  getCurPos[2]=0xfd;
 8000a08:	23fd      	movs	r3, #253	; 0xfd
 8000a0a:	75bb      	strb	r3, [r7, #22]
  getCurPos[3]=0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	75fb      	strb	r3, [r7, #23]
  getCurPos[4]=1;
 8000a10:	2301      	movs	r3, #1
 8000a12:	763b      	strb	r3, [r7, #24]
  getCurPos[5]=7;
 8000a14:	2307      	movs	r3, #7
 8000a16:	767b      	strb	r3, [r7, #25]
  getCurPos[6]=0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	76bb      	strb	r3, [r7, #26]
  getCurPos[7]=0x02;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	76fb      	strb	r3, [r7, #27]
  getCurPos[8]=0x84;
 8000a20:	2384      	movs	r3, #132	; 0x84
 8000a22:	773b      	strb	r3, [r7, #28]
  getCurPos[9]=0x00;
 8000a24:	2300      	movs	r3, #0
 8000a26:	777b      	strb	r3, [r7, #29]
  getCurPos[10]=0x04;
 8000a28:	2304      	movs	r3, #4
 8000a2a:	77bb      	strb	r3, [r7, #30]
  getCurPos[11]=0x00;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	77fb      	strb	r3, [r7, #31]
  crc16=update_crc(0, getCurPos, 12);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	220c      	movs	r2, #12
 8000a36:	4619      	mov	r1, r3
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fc77 	bl	800132c <update_crc>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  getCurPos[12]=crc16 & 0x00ff;
 8000a44:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f887 3020 	strb.w	r3, [r7, #32]
  getCurPos[13]=(crc16>>8) & 0x00ff;
 8000a4e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000a52:	0a1b      	lsrs	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  HAL_UART_Transmit(&huart1,getCurPos,14,2); // get the current position
 8000a5c:	f107 0114 	add.w	r1, r7, #20
 8000a60:	2302      	movs	r3, #2
 8000a62:	220e      	movs	r2, #14
 8000a64:	4838      	ldr	r0, [pc, #224]	; (8000b48 <main+0x360>)
 8000a66:	f004 fc41 	bl	80052ec <HAL_UART_Transmit>

  uint8_t setDesPos[16];
  setDesPos[0]=0xff;
 8000a6a:	23ff      	movs	r3, #255	; 0xff
 8000a6c:	713b      	strb	r3, [r7, #4]
  setDesPos[1]=0xff;
 8000a6e:	23ff      	movs	r3, #255	; 0xff
 8000a70:	717b      	strb	r3, [r7, #5]
  setDesPos[2]=0xfd;
 8000a72:	23fd      	movs	r3, #253	; 0xfd
 8000a74:	71bb      	strb	r3, [r7, #6]
  setDesPos[3]=0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71fb      	strb	r3, [r7, #7]
  setDesPos[4]=1;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	723b      	strb	r3, [r7, #8]
  setDesPos[5]=9;
 8000a7e:	2309      	movs	r3, #9
 8000a80:	727b      	strb	r3, [r7, #9]
  setDesPos[6]=0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	72bb      	strb	r3, [r7, #10]
  setDesPos[7]=0x03;
 8000a86:	2303      	movs	r3, #3
 8000a88:	72fb      	strb	r3, [r7, #11]
  setDesPos[8]=0x74;
 8000a8a:	2374      	movs	r3, #116	; 0x74
 8000a8c:	733b      	strb	r3, [r7, #12]
  setDesPos[9]=0x00;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	737b      	strb	r3, [r7, #13]
  setDesPos[10]=0x04; // des pos
 8000a92:	2304      	movs	r3, #4
 8000a94:	73bb      	strb	r3, [r7, #14]
  setDesPos[11]=0x00; // des pos
 8000a96:	2300      	movs	r3, #0
 8000a98:	73fb      	strb	r3, [r7, #15]
  setDesPos[12]=0x1d; // des pos
 8000a9a:	231d      	movs	r3, #29
 8000a9c:	743b      	strb	r3, [r7, #16]
  setDesPos[13]=0x15; // des pos
 8000a9e:	2315      	movs	r3, #21
 8000aa0:	747b      	strb	r3, [r7, #17]
  setDesPos[14]=0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	74bb      	strb	r3, [r7, #18]
  setDesPos[15]=0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	74fb      	strb	r3, [r7, #19]

  HAL_TIM_Base_Start_IT(&htim2);
 8000aaa:	4829      	ldr	r0, [pc, #164]	; (8000b50 <main+0x368>)
 8000aac:	f003 fe78 	bl	80047a0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8000ab0:	4828      	ldr	r0, [pc, #160]	; (8000b54 <main+0x36c>)
 8000ab2:	f003 fe05 	bl	80046c0 <HAL_TIM_Base_Start>
  HAL_Delay(100);
 8000ab6:	2064      	movs	r0, #100	; 0x64
 8000ab8:	f000 ff26 	bl	8001908 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int gpioCount=0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	657b      	str	r3, [r7, #84]	; 0x54
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac8:	f002 f942 	bl	8002d50 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (trigger1msFlag==1)
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <main+0x354>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	f040 80fa 	bne.w	8000cca <main+0x4e2>
	  {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2101      	movs	r1, #1
 8000ada:	4817      	ldr	r0, [pc, #92]	; (8000b38 <main+0x350>)
 8000adc:	f002 f938 	bl	8002d50 <HAL_GPIO_WritePin>
		spi1state=HAL_SPI_TransmitReceive(&hspi1, spiAsk, spi1Rec, 5,1);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	9300      	str	r3, [sp, #0]
 8000ae4:	2305      	movs	r3, #5
 8000ae6:	4a1c      	ldr	r2, [pc, #112]	; (8000b58 <main+0x370>)
 8000ae8:	491c      	ldr	r1, [pc, #112]	; (8000b5c <main+0x374>)
 8000aea:	481d      	ldr	r0, [pc, #116]	; (8000b60 <main+0x378>)
 8000aec:	f003 fa19 	bl	8003f22 <HAL_SPI_TransmitReceive>
 8000af0:	4603      	mov	r3, r0
 8000af2:	461a      	mov	r2, r3
 8000af4:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <main+0x37c>)
 8000af6:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2101      	movs	r1, #1
 8000afc:	480e      	ldr	r0, [pc, #56]	; (8000b38 <main+0x350>)
 8000afe:	f002 f927 	bl	8002d50 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2102      	movs	r1, #2
 8000b06:	480c      	ldr	r0, [pc, #48]	; (8000b38 <main+0x350>)
 8000b08:	f002 f922 	bl	8002d50 <HAL_GPIO_WritePin>
		spi2state=HAL_SPI_TransmitReceive(&hspi1, spiAsk, spi2Rec, 5,1);
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2305      	movs	r3, #5
 8000b12:	4a15      	ldr	r2, [pc, #84]	; (8000b68 <main+0x380>)
 8000b14:	4911      	ldr	r1, [pc, #68]	; (8000b5c <main+0x374>)
 8000b16:	4812      	ldr	r0, [pc, #72]	; (8000b60 <main+0x378>)
 8000b18:	f003 fa03 	bl	8003f22 <HAL_SPI_TransmitReceive>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <main+0x384>)
 8000b22:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000b24:	2201      	movs	r2, #1
 8000b26:	2102      	movs	r1, #2
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <main+0x350>)
 8000b2a:	f002 f911 	bl	8002d50 <HAL_GPIO_WritePin>
		int i;
		for (i=0;i<8;i++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b32:	e025      	b.n	8000b80 <main+0x398>
 8000b34:	20000280 	.word	0x20000280
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	200002dc 	.word	0x200002dc
 8000b40:	2000033e 	.word	0x2000033e
 8000b44:	2000033f 	.word	0x2000033f
 8000b48:	20000190 	.word	0x20000190
 8000b4c:	20000310 	.word	0x20000310
 8000b50:	200000f8 	.word	0x200000f8
 8000b54:	20000144 	.word	0x20000144
 8000b58:	200002e0 	.word	0x200002e0
 8000b5c:	20000000 	.word	0x20000000
 8000b60:	20000094 	.word	0x20000094
 8000b64:	20000344 	.word	0x20000344
 8000b68:	200002e8 	.word	0x200002e8
 8000b6c:	20000345 	.word	0x20000345
			spiTxData[i]=0;
 8000b70:	4a8c      	ldr	r2, [pc, #560]	; (8000da4 <main+0x5bc>)
 8000b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b74:	4413      	add	r3, r2
 8000b76:	2200      	movs	r2, #0
 8000b78:	701a      	strb	r2, [r3, #0]
		for (i=0;i<8;i++)
 8000b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000b80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b82:	2b07      	cmp	r3, #7
 8000b84:	ddf4      	ble.n	8000b70 <main+0x388>

		uint8_t dataTmp[4];
		uint8_t crc8;
		dataTmp[0]=spi1Rec[1];
 8000b86:	4b88      	ldr	r3, [pc, #544]	; (8000da8 <main+0x5c0>)
 8000b88:	785b      	ldrb	r3, [r3, #1]
 8000b8a:	703b      	strb	r3, [r7, #0]
		dataTmp[1]=spi1Rec[2];
 8000b8c:	4b86      	ldr	r3, [pc, #536]	; (8000da8 <main+0x5c0>)
 8000b8e:	789b      	ldrb	r3, [r3, #2]
 8000b90:	707b      	strb	r3, [r7, #1]
		dataTmp[2]=spi1Rec[3];
 8000b92:	4b85      	ldr	r3, [pc, #532]	; (8000da8 <main+0x5c0>)
 8000b94:	78db      	ldrb	r3, [r3, #3]
 8000b96:	70bb      	strb	r3, [r7, #2]
		dataTmp[3]=spi1Rec[4];
 8000b98:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <main+0x5c0>)
 8000b9a:	791b      	ldrb	r3, [r3, #4]
 8000b9c:	70fb      	strb	r3, [r7, #3]
		crc8=SAEJ1850_CRC8(dataTmp,3);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2103      	movs	r1, #3
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 fb84 	bl	80012b0 <SAEJ1850_CRC8>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (crc8==dataTmp[3] && spi1state==HAL_OK && (dataTmp[0]+dataTmp[1])!=0)
 8000bae:	78fb      	ldrb	r3, [r7, #3]
 8000bb0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d110      	bne.n	8000bda <main+0x3f2>
 8000bb8:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <main+0x5c4>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d10c      	bne.n	8000bda <main+0x3f2>
 8000bc0:	783b      	ldrb	r3, [r7, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	787b      	ldrb	r3, [r7, #1]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d006      	beq.n	8000bda <main+0x3f2>
		{
			spiTxData[1]=dataTmp[0];
 8000bcc:	783a      	ldrb	r2, [r7, #0]
 8000bce:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <main+0x5bc>)
 8000bd0:	705a      	strb	r2, [r3, #1]
			spiTxData[0]=dataTmp[1];
 8000bd2:	787a      	ldrb	r2, [r7, #1]
 8000bd4:	4b73      	ldr	r3, [pc, #460]	; (8000da4 <main+0x5bc>)
 8000bd6:	701a      	strb	r2, [r3, #0]
 8000bd8:	e00a      	b.n	8000bf0 <main+0x408>
		}
		else
		{
			spiTxData[1]=spiTxDataOld[1];
 8000bda:	4b75      	ldr	r3, [pc, #468]	; (8000db0 <main+0x5c8>)
 8000bdc:	785a      	ldrb	r2, [r3, #1]
 8000bde:	4b71      	ldr	r3, [pc, #452]	; (8000da4 <main+0x5bc>)
 8000be0:	705a      	strb	r2, [r3, #1]
			spiTxData[0]=spiTxDataOld[0];
 8000be2:	4b73      	ldr	r3, [pc, #460]	; (8000db0 <main+0x5c8>)
 8000be4:	781a      	ldrb	r2, [r3, #0]
 8000be6:	4b6f      	ldr	r3, [pc, #444]	; (8000da4 <main+0x5bc>)
 8000be8:	701a      	strb	r2, [r3, #0]
			spiTxData[4]=0x0e;
 8000bea:	4b6e      	ldr	r3, [pc, #440]	; (8000da4 <main+0x5bc>)
 8000bec:	220e      	movs	r2, #14
 8000bee:	711a      	strb	r2, [r3, #4]
		}

		dataTmp[0]=spi2Rec[1];
 8000bf0:	4b70      	ldr	r3, [pc, #448]	; (8000db4 <main+0x5cc>)
 8000bf2:	785b      	ldrb	r3, [r3, #1]
 8000bf4:	703b      	strb	r3, [r7, #0]
		dataTmp[1]=spi2Rec[2];
 8000bf6:	4b6f      	ldr	r3, [pc, #444]	; (8000db4 <main+0x5cc>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	707b      	strb	r3, [r7, #1]
		dataTmp[2]=spi2Rec[3];
 8000bfc:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <main+0x5cc>)
 8000bfe:	78db      	ldrb	r3, [r3, #3]
 8000c00:	70bb      	strb	r3, [r7, #2]
		dataTmp[3]=spi2Rec[4];
 8000c02:	4b6c      	ldr	r3, [pc, #432]	; (8000db4 <main+0x5cc>)
 8000c04:	791b      	ldrb	r3, [r3, #4]
 8000c06:	70fb      	strb	r3, [r7, #3]
		crc8=SAEJ1850_CRC8(dataTmp,3);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f000 fb4f 	bl	80012b0 <SAEJ1850_CRC8>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
		if (crc8==dataTmp[3] && spi2state==HAL_OK && (dataTmp[0]+dataTmp[1])!=0)
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d110      	bne.n	8000c44 <main+0x45c>
 8000c22:	4b65      	ldr	r3, [pc, #404]	; (8000db8 <main+0x5d0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d10c      	bne.n	8000c44 <main+0x45c>
 8000c2a:	783b      	ldrb	r3, [r7, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	787b      	ldrb	r3, [r7, #1]
 8000c30:	4413      	add	r3, r2
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d006      	beq.n	8000c44 <main+0x45c>
		{
			spiTxData[3]=dataTmp[0];
 8000c36:	783a      	ldrb	r2, [r7, #0]
 8000c38:	4b5a      	ldr	r3, [pc, #360]	; (8000da4 <main+0x5bc>)
 8000c3a:	70da      	strb	r2, [r3, #3]
			spiTxData[2]=dataTmp[1];
 8000c3c:	787a      	ldrb	r2, [r7, #1]
 8000c3e:	4b59      	ldr	r3, [pc, #356]	; (8000da4 <main+0x5bc>)
 8000c40:	709a      	strb	r2, [r3, #2]
 8000c42:	e00a      	b.n	8000c5a <main+0x472>
		}
		else
		{
			spiTxData[3]=spiTxDataOld[3];
 8000c44:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <main+0x5c8>)
 8000c46:	78da      	ldrb	r2, [r3, #3]
 8000c48:	4b56      	ldr	r3, [pc, #344]	; (8000da4 <main+0x5bc>)
 8000c4a:	70da      	strb	r2, [r3, #3]
			spiTxData[2]=spiTxDataOld[2];
 8000c4c:	4b58      	ldr	r3, [pc, #352]	; (8000db0 <main+0x5c8>)
 8000c4e:	789a      	ldrb	r2, [r3, #2]
 8000c50:	4b54      	ldr	r3, [pc, #336]	; (8000da4 <main+0x5bc>)
 8000c52:	709a      	strb	r2, [r3, #2]
			spiTxData[5]=0x0e;
 8000c54:	4b53      	ldr	r3, [pc, #332]	; (8000da4 <main+0x5bc>)
 8000c56:	220e      	movs	r2, #14
 8000c58:	715a      	strb	r2, [r3, #5]
		}

		for (i=0;i<8;i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c5e:	e00b      	b.n	8000c78 <main+0x490>
			spiTxDataOld[i]=spiTxData[i];
 8000c60:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <main+0x5bc>)
 8000c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c64:	4413      	add	r3, r2
 8000c66:	7819      	ldrb	r1, [r3, #0]
 8000c68:	4a51      	ldr	r2, [pc, #324]	; (8000db0 <main+0x5c8>)
 8000c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c6c:	4413      	add	r3, r2
 8000c6e:	460a      	mov	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
		for (i=0;i<8;i++)
 8000c72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c74:	3301      	adds	r3, #1
 8000c76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c7a:	2b07      	cmp	r3, #7
 8000c7c:	ddf0      	ble.n	8000c60 <main+0x478>

		for (i=0;i<8;i++)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c82:	e00b      	b.n	8000c9c <main+0x4b4>
			spiTxDataBuff[i]=spiTxDataBuff[i+8];
 8000c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c86:	3308      	adds	r3, #8
 8000c88:	4a4c      	ldr	r2, [pc, #304]	; (8000dbc <main+0x5d4>)
 8000c8a:	5cd1      	ldrb	r1, [r2, r3]
 8000c8c:	4a4b      	ldr	r2, [pc, #300]	; (8000dbc <main+0x5d4>)
 8000c8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c90:	4413      	add	r3, r2
 8000c92:	460a      	mov	r2, r1
 8000c94:	701a      	strb	r2, [r3, #0]
		for (i=0;i<8;i++)
 8000c96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c98:	3301      	adds	r3, #1
 8000c9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000c9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	ddf0      	ble.n	8000c84 <main+0x49c>

		for (i=0;i<8;i++)
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000ca6:	e00a      	b.n	8000cbe <main+0x4d6>
			spiTxDataBuff[i+8]=spiTxData[i];
 8000ca8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000caa:	3308      	adds	r3, #8
 8000cac:	493d      	ldr	r1, [pc, #244]	; (8000da4 <main+0x5bc>)
 8000cae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cb0:	440a      	add	r2, r1
 8000cb2:	7811      	ldrb	r1, [r2, #0]
 8000cb4:	4a41      	ldr	r2, [pc, #260]	; (8000dbc <main+0x5d4>)
 8000cb6:	54d1      	strb	r1, [r2, r3]
		for (i=0;i<8;i++)
 8000cb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cba:	3301      	adds	r3, #1
 8000cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cc0:	2b07      	cmp	r3, #7
 8000cc2:	ddf1      	ble.n	8000ca8 <main+0x4c0>

		trigger1msFlag=0;
 8000cc4:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <main+0x5d8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
	  }
	if (trigger3msFlag==2)
 8000cca:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <main+0x5dc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b02      	cmp	r3, #2
 8000cd0:	d14f      	bne.n	8000d72 <main+0x58a>
	{
		if (torEnFlag!=torEnFlagOld)
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <main+0x5e0>)
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <main+0x5e4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d016      	beq.n	8000d0c <main+0x524>
		{
			if (torEnFlag==1)
 8000cde:	4b3a      	ldr	r3, [pc, #232]	; (8000dc8 <main+0x5e0>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d107      	bne.n	8000cf6 <main+0x50e>
				HAL_UART_Transmit(&huart1,torEn,13,2);
 8000ce6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000cea:	2302      	movs	r3, #2
 8000cec:	220d      	movs	r2, #13
 8000cee:	4838      	ldr	r0, [pc, #224]	; (8000dd0 <main+0x5e8>)
 8000cf0:	f004 fafc 	bl	80052ec <HAL_UART_Transmit>
 8000cf4:	e006      	b.n	8000d04 <main+0x51c>
			else
				HAL_UART_Transmit(&huart1,torDis,13,2);
 8000cf6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	220d      	movs	r2, #13
 8000cfe:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <main+0x5e8>)
 8000d00:	f004 faf4 	bl	80052ec <HAL_UART_Transmit>
			torEnFlagOld=torEnFlag;
 8000d04:	4b30      	ldr	r3, [pc, #192]	; (8000dc8 <main+0x5e0>)
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <main+0x5e4>)
 8000d0a:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Receive_DMA(&huart1, dmaBuff, 15);
		}

		if (torEnFlag==1)
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <main+0x5e0>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d124      	bne.n	8000d5e <main+0x576>
		{
			setDesPos[10]=desPos[0]; // des pos
 8000d14:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <main+0x5ec>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	73bb      	strb	r3, [r7, #14]
			setDesPos[11]=desPos[1]; // des pos
 8000d1a:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <main+0x5ec>)
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	73fb      	strb	r3, [r7, #15]
			setDesPos[12]=desPos[2]; // des pos
 8000d20:	4b2c      	ldr	r3, [pc, #176]	; (8000dd4 <main+0x5ec>)
 8000d22:	789b      	ldrb	r3, [r3, #2]
 8000d24:	743b      	strb	r3, [r7, #16]
			setDesPos[13]=desPos[3]; // des pos
 8000d26:	4b2b      	ldr	r3, [pc, #172]	; (8000dd4 <main+0x5ec>)
 8000d28:	78db      	ldrb	r3, [r3, #3]
 8000d2a:	747b      	strb	r3, [r7, #17]
			crc16=update_crc(0, setDesPos, 14);
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	220e      	movs	r2, #14
 8000d30:	4619      	mov	r1, r3
 8000d32:	2000      	movs	r0, #0
 8000d34:	f000 fafa 	bl	800132c <update_crc>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			setDesPos[14]= crc16 & 0x00ff;
 8000d3e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	74bb      	strb	r3, [r7, #18]
			setDesPos[15] = (crc16>>8) & 0x00ff;
 8000d46:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8000d4a:	0a1b      	lsrs	r3, r3, #8
 8000d4c:	b29b      	uxth	r3, r3
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	74fb      	strb	r3, [r7, #19]
			HAL_UART_Transmit(&huart1,setDesPos,16,2);
 8000d52:	1d39      	adds	r1, r7, #4
 8000d54:	2302      	movs	r3, #2
 8000d56:	2210      	movs	r2, #16
 8000d58:	481d      	ldr	r0, [pc, #116]	; (8000dd0 <main+0x5e8>)
 8000d5a:	f004 fac7 	bl	80052ec <HAL_UART_Transmit>
		}

		HAL_UART_Transmit(&huart1,getCurPos,14,2);
 8000d5e:	f107 0114 	add.w	r1, r7, #20
 8000d62:	2302      	movs	r3, #2
 8000d64:	220e      	movs	r2, #14
 8000d66:	481a      	ldr	r0, [pc, #104]	; (8000dd0 <main+0x5e8>)
 8000d68:	f004 fac0 	bl	80052ec <HAL_UART_Transmit>
		trigger3msFlag=0;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <main+0x5dc>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
	}
	if (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) >= 1)
 8000d72:	2140      	movs	r1, #64	; 0x40
 8000d74:	4818      	ldr	r0, [pc, #96]	; (8000dd8 <main+0x5f0>)
 8000d76:	f001 fd63 	bl	8002840 <HAL_FDCAN_GetRxFifoFillLevel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d00c      	beq.n	8000d9a <main+0x5b2>
	  {
		  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, rxData) == HAL_OK)
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <main+0x5f4>)
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <main+0x5f8>)
 8000d84:	2140      	movs	r1, #64	; 0x40
 8000d86:	4814      	ldr	r0, [pc, #80]	; (8000dd8 <main+0x5f0>)
 8000d88:	f001 fc80 	bl	800268c <HAL_FDCAN_GetRxMessage>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <main+0x5b2>
	  	  {
			  unpack_reply(&RxHeader, rxData);
 8000d92:	4912      	ldr	r1, [pc, #72]	; (8000ddc <main+0x5f4>)
 8000d94:	4812      	ldr	r0, [pc, #72]	; (8000de0 <main+0x5f8>)
 8000d96:	f7ff fbc1 	bl	800051c <unpack_reply>
	 /* if(gpioCount==2)
	  	  {gpioCount=0;HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);}
	  else
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
	  gpioCount++;*/
	  delay_us(10);
 8000d9a:	200a      	movs	r0, #10
 8000d9c:	f7ff fcd0 	bl	8000740 <delay_us>
	if (trigger1msFlag==1)
 8000da0:	e694      	b.n	8000acc <main+0x2e4>
 8000da2:	bf00      	nop
 8000da4:	200002f0 	.word	0x200002f0
 8000da8:	200002e0 	.word	0x200002e0
 8000dac:	20000344 	.word	0x20000344
 8000db0:	200002f8 	.word	0x200002f8
 8000db4:	200002e8 	.word	0x200002e8
 8000db8:	20000345 	.word	0x20000345
 8000dbc:	20000300 	.word	0x20000300
 8000dc0:	200002dc 	.word	0x200002dc
 8000dc4:	200002dd 	.word	0x200002dd
 8000dc8:	2000033e 	.word	0x2000033e
 8000dcc:	2000033f 	.word	0x2000033f
 8000dd0:	20000190 	.word	0x20000190
 8000dd4:	20000340 	.word	0x20000340
 8000dd8:	20000030 	.word	0x20000030
 8000ddc:	200002d4 	.word	0x200002d4
 8000de0:	200002a4 	.word	0x200002a4

08000de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b094      	sub	sp, #80	; 0x50
 8000de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dea:	f107 0318 	add.w	r3, r7, #24
 8000dee:	2238      	movs	r2, #56	; 0x38
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f006 f8c8 	bl	8006f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df8:	1d3b      	adds	r3, r7, #4
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e06:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e0a:	f001 ffb9 	bl	8002d80 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e18:	2340      	movs	r3, #64	; 0x40
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e20:	2302      	movs	r3, #2
 8000e22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e24:	2304      	movs	r3, #4
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8000e28:	234b      	movs	r3, #75	; 0x4b
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e34:	2302      	movs	r3, #2
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 f843 	bl	8002ec8 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000e48:	f000 fade 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2303      	movs	r3, #3
 8000e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e60:	1d3b      	adds	r3, r7, #4
 8000e62:	2104      	movs	r1, #4
 8000e64:	4618      	mov	r0, r3
 8000e66:	f002 fb47 	bl	80034f8 <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e70:	f000 faca 	bl	8001408 <Error_Handler>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	; 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000e82:	4b30      	ldr	r3, [pc, #192]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000e84:	4a30      	ldr	r2, [pc, #192]	; (8000f48 <MX_FDCAN1_Init+0xcc>)
 8000e86:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000ea0:	4b28      	ldr	r3, [pc, #160]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000eac:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 16;
 8000eb2:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 129;
 8000eb8:	4b22      	ldr	r3, [pc, #136]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000eba:	2281      	movs	r2, #129	; 0x81
 8000ebc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 20;
 8000ebe:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ec0:	2214      	movs	r2, #20
 8000ec2:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000ec4:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 4;
 8000eca:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 5;
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ed2:	2205      	movs	r2, #5
 8000ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ed8:	2204      	movs	r2, #4
 8000eda:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8000edc:	4b19      	ldr	r3, [pc, #100]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000eee:	4815      	ldr	r0, [pc, #84]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000ef0:	f001 f97a 	bl	80021e8 <HAL_FDCAN_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8000efa:	f000 fa85 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_DUAL;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x145;
 8000f0e:	f240 1345 	movw	r3, #325	; 0x145
 8000f12:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x146;
 8000f14:	f44f 73a3 	mov.w	r3, #326	; 0x146
 8000f18:	617b      	str	r3, [r7, #20]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000f1a:	463b      	mov	r3, r7
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000f20:	f001 fabc 	bl	800249c <HAL_FDCAN_ConfigFilter>
  HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	2102      	movs	r1, #2
 8000f2e:	4805      	ldr	r0, [pc, #20]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000f30:	f001 fb0e 	bl	8002550 <HAL_FDCAN_ConfigGlobalFilter>
  HAL_FDCAN_Start(&hfdcan1);
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_FDCAN1_Init+0xc8>)
 8000f36:	f001 fb3c 	bl	80025b2 <HAL_FDCAN_Start>

  /* USER CODE END FDCAN1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000030 	.word	0x20000030
 8000f48:	40006400 	.word	0x40006400

08000f4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f50:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f52:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <MX_SPI1_Init+0x78>)
 8000f54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f66:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f6a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f72:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f7e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f80:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f82:	2230      	movs	r2, #48	; 0x30
 8000f84:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000f9a:	2207      	movs	r2, #7
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <MX_SPI1_Init+0x74>)
 8000fac:	f002 ff0e 	bl	8003dcc <HAL_SPI_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fb6:	f000 fa27 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000094 	.word	0x20000094
 8000fc4:	40013000 	.word	0x40013000

08000fc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fce:	f107 0310 	add.w	r3, r7, #16
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_TIM2_Init+0x98>)
 8000fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 14;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_TIM2_Init+0x98>)
 8000ff0:	220e      	movs	r2, #14
 8000ff2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff4:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <MX_TIM2_Init+0x98>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <MX_TIM2_Init+0x98>)
 8000ffc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001000:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <MX_TIM2_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001008:	4b15      	ldr	r3, [pc, #84]	; (8001060 <MX_TIM2_Init+0x98>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800100e:	4814      	ldr	r0, [pc, #80]	; (8001060 <MX_TIM2_Init+0x98>)
 8001010:	f003 fafe 	bl	8004610 <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800101a:	f000 f9f5 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <MX_TIM2_Init+0x98>)
 800102c:	f003 fdb0 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001036:	f000 f9e7 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	4619      	mov	r1, r3
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <MX_TIM2_Init+0x98>)
 8001048:	f004 f824 	bl	8005094 <HAL_TIMEx_MasterConfigSynchronization>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001052:	f000 f9d9 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000f8 	.word	0x200000f8

08001064 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <MX_TIM4_Init+0x94>)
 8001084:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <MX_TIM4_Init+0x98>)
 8001086:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 149;
 8001088:	4b1b      	ldr	r3, [pc, #108]	; (80010f8 <MX_TIM4_Init+0x94>)
 800108a:	2295      	movs	r2, #149	; 0x95
 800108c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108e:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <MX_TIM4_Init+0x94>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <MX_TIM4_Init+0x94>)
 8001096:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800109a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <MX_TIM4_Init+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <MX_TIM4_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_TIM4_Init+0x94>)
 80010aa:	f003 fab1 	bl	8004610 <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80010b4:	f000 f9a8 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0310 	add.w	r3, r7, #16
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_TIM4_Init+0x94>)
 80010c6:	f003 fd63 	bl	8004b90 <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80010d0:	f000 f99a 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_TIM4_Init+0x94>)
 80010e2:	f003 ffd7 	bl	8005094 <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f000 f98c 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000144 	.word	0x20000144
 80010fc:	40000800 	.word	0x40000800

08001100 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <MX_USART1_UART_Init+0x94>)
 8001108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800110c:	4a22      	ldr	r2, [pc, #136]	; (8001198 <MX_USART1_UART_Init+0x98>)
 800110e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001124:	220c      	movs	r2, #12
 8001126:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001128:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001142:	2200      	movs	r2, #0
 8001144:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001146:	4812      	ldr	r0, [pc, #72]	; (8001190 <MX_USART1_UART_Init+0x90>)
 8001148:	f004 f880 	bl	800524c <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
 8001152:	f000 f959 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800115a:	f005 fe19 	bl	8006d90 <HAL_UARTEx_SetTxFifoThreshold>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_USART1_UART_Init+0x68>
  {
    Error_Handler();
 8001164:	f000 f950 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800116c:	f005 fe4e 	bl	8006e0c <HAL_UARTEx_SetRxFifoThreshold>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_USART1_UART_Init+0x7a>
  {
    Error_Handler();
 8001176:	f000 f947 	bl	8001408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_USART1_UART_Init+0x90>)
 800117c:	f005 fdcf 	bl	8006d1e <HAL_UARTEx_DisableFifoMode>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8001186:	f000 f93f 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	20000190 	.word	0x20000190
 8001194:	40013800 	.word	0x40013800
 8001198:	000f4240 	.word	0x000f4240

0800119c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <MX_DMA_Init+0x50>)
 80011a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a6:	4a11      	ldr	r2, [pc, #68]	; (80011ec <MX_DMA_Init+0x50>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6493      	str	r3, [r2, #72]	; 0x48
 80011ae:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <MX_DMA_Init+0x50>)
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ba:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_DMA_Init+0x50>)
 80011bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <MX_DMA_Init+0x50>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6493      	str	r3, [r2, #72]	; 0x48
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_DMA_Init+0x50>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	603b      	str	r3, [r7, #0]
 80011d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	200b      	movs	r0, #11
 80011d8:	f000 fc93 	bl	8001b02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80011dc:	200b      	movs	r0, #11
 80011de:	f000 fcaa 	bl	8001b36 <HAL_NVIC_EnableIRQ>

}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40021000 	.word	0x40021000

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b088      	sub	sp, #32
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120a:	4a27      	ldr	r2, [pc, #156]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001212:	4b25      	ldr	r3, [pc, #148]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	f003 0320 	and.w	r3, r3, #32
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800121e:	4b22      	ldr	r3, [pc, #136]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	64d3      	str	r3, [r2, #76]	; 0x4c
 800122a:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <MX_GPIO_Init+0xb8>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <MX_GPIO_Init+0xb8>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001256:	f001 fd7b 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 800125a:	2201      	movs	r2, #1
 800125c:	2103      	movs	r1, #3
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <MX_GPIO_Init+0xbc>)
 8001260:	f001 fd76 	bl	8002d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001264:	2301      	movs	r3, #1
 8001266:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800126c:	2302      	movs	r3, #2
 800126e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001270:	2303      	movs	r3, #3
 8001272:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127e:	f001 fbe5 	bl	8002a4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001282:	2303      	movs	r3, #3
 8001284:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800128e:	2303      	movs	r3, #3
 8001290:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001292:	f107 030c 	add.w	r3, r7, #12
 8001296:	4619      	mov	r1, r3
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_GPIO_Init+0xbc>)
 800129a:	f001 fbd7 	bl	8002a4c <HAL_GPIO_Init>

}
 800129e:	bf00      	nop
 80012a0:	3720      	adds	r7, #32
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021000 	.word	0x40021000
 80012ac:	48000400 	.word	0x48000400

080012b0 <SAEJ1850_CRC8>:

/* USER CODE BEGIN 4 */
uint8_t SAEJ1850_CRC8(uint8_t* data,  uint8_t length)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
	uint8_t i,j;
	uint8_t crc,ploy;

	crc = 0xff;
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	737b      	strb	r3, [r7, #13]
	ploy = 0x1d;
 80012c0:	231d      	movs	r3, #29
 80012c2:	733b      	strb	r3, [r7, #12]

	for(i = 0; i< length; i++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	e022      	b.n	8001310 <SAEJ1850_CRC8+0x60>
	{
		crc^= data[i];
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781a      	ldrb	r2, [r3, #0]
 80012d2:	7b7b      	ldrb	r3, [r7, #13]
 80012d4:	4053      	eors	r3, r2
 80012d6:	737b      	strb	r3, [r7, #13]
		for(j =0; j< 8; j++)
 80012d8:	2300      	movs	r3, #0
 80012da:	73bb      	strb	r3, [r7, #14]
 80012dc:	e012      	b.n	8001304 <SAEJ1850_CRC8+0x54>
		{
			if(crc& 0x80)
 80012de:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da08      	bge.n	80012f8 <SAEJ1850_CRC8+0x48>
				crc = (crc<<1)^ploy;
 80012e6:	7b7b      	ldrb	r3, [r7, #13]
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	b25a      	sxtb	r2, r3
 80012ec:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80012f0:	4053      	eors	r3, r2
 80012f2:	b25b      	sxtb	r3, r3
 80012f4:	737b      	strb	r3, [r7, #13]
 80012f6:	e002      	b.n	80012fe <SAEJ1850_CRC8+0x4e>
			else
				crc <<=1;
 80012f8:	7b7b      	ldrb	r3, [r7, #13]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	737b      	strb	r3, [r7, #13]
		for(j =0; j< 8; j++)
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	3301      	adds	r3, #1
 8001302:	73bb      	strb	r3, [r7, #14]
 8001304:	7bbb      	ldrb	r3, [r7, #14]
 8001306:	2b07      	cmp	r3, #7
 8001308:	d9e9      	bls.n	80012de <SAEJ1850_CRC8+0x2e>
	for(i = 0; i< length; i++)
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	3301      	adds	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	7bfa      	ldrb	r2, [r7, #15]
 8001312:	78fb      	ldrb	r3, [r7, #3]
 8001314:	429a      	cmp	r2, r3
 8001316:	d3d8      	bcc.n	80012ca <SAEJ1850_CRC8+0x1a>
		}
	}
	crc^=0xff;
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	43db      	mvns	r3, r3
 800131c:	737b      	strb	r3, [r7, #13]
	return crc;
 800131e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <update_crc>:
	outBytes[2]=(uint8_t)((data & 0xff0000)>>16);
	outBytes[3]=(uint8_t)((data>>24) & 0xff);
}

unsigned short update_crc(unsigned short crc_accum, unsigned char *data_blk_ptr, unsigned short data_blk_size)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8001332:	af00      	add	r7, sp, #0
 8001334:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001338:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800133c:	6019      	str	r1, [r3, #0]
 800133e:	4611      	mov	r1, r2
 8001340:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001344:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001348:	4602      	mov	r2, r0
 800134a:	801a      	strh	r2, [r3, #0]
 800134c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001350:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001354:	460a      	mov	r2, r1
 8001356:	801a      	strh	r2, [r3, #0]
    unsigned short i, j;
    unsigned short crc_table[256] = {
 8001358:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800135c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001360:	4a28      	ldr	r2, [pc, #160]	; (8001404 <update_crc+0xd8>)
 8001362:	4618      	mov	r0, r3
 8001364:	4611      	mov	r1, r2
 8001366:	f44f 7300 	mov.w	r3, #512	; 0x200
 800136a:	461a      	mov	r2, r3
 800136c:	f005 fdfe 	bl	8006f6c <memcpy>
        0x0270, 0x8275, 0x827F, 0x027A, 0x826B, 0x026E, 0x0264, 0x8261,
        0x0220, 0x8225, 0x822F, 0x022A, 0x823B, 0x023E, 0x0234, 0x8231,
        0x8213, 0x0216, 0x021C, 0x8219, 0x0208, 0x820D, 0x8207, 0x0202
    };

    for(j = 0; j < data_blk_size; j++)
 8001370:	2300      	movs	r3, #0
 8001372:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 8001376:	e031      	b.n	80013dc <update_crc+0xb0>
    {
        i = ((unsigned short)(crc_accum >> 8) ^ data_blk_ptr[j]) & 0xFF;
 8001378:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800137c:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b29a      	uxth	r2, r3
 8001386:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 800138a:	f507 7104 	add.w	r1, r7, #528	; 0x210
 800138e:	f5a1 7104 	sub.w	r1, r1, #528	; 0x210
 8001392:	6809      	ldr	r1, [r1, #0]
 8001394:	440b      	add	r3, r1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4053      	eors	r3, r2
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
        crc_accum = (crc_accum << 8) ^ crc_table[i];
 80013a4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013a8:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	f8b7 120c 	ldrh.w	r1, [r7, #524]	; 0x20c
 80013b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013be:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80013c2:	b21b      	sxth	r3, r3
 80013c4:	4053      	eors	r3, r2
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013cc:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80013d0:	801a      	strh	r2, [r3, #0]
    for(j = 0; j < data_blk_size; j++)
 80013d2:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 80013d6:	3301      	adds	r3, #1
 80013d8:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
 80013dc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013e0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80013e4:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d3c4      	bcc.n	8001378 <update_crc+0x4c>
    }

    return crc_accum;
 80013ee:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80013f2:	f2a3 230a 	subw	r3, r3, #522	; 0x20a
 80013f6:	881b      	ldrh	r3, [r3, #0]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	f507 7704 	add.w	r7, r7, #528	; 0x210
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	08006fb0 	.word	0x08006fb0

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <HAL_MspInit+0x44>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	4a0e      	ldr	r2, [pc, #56]	; (8001458 <HAL_MspInit+0x44>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6613      	str	r3, [r2, #96]	; 0x60
 8001426:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_MspInit+0x44>)
 8001428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_MspInit+0x44>)
 8001434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001436:	4a08      	ldr	r2, [pc, #32]	; (8001458 <HAL_MspInit+0x44>)
 8001438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800143c:	6593      	str	r3, [r2, #88]	; 0x58
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_MspInit+0x44>)
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	40021000 	.word	0x40021000

0800145c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b09e      	sub	sp, #120	; 0x78
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	2254      	movs	r2, #84	; 0x54
 800147a:	2100      	movs	r1, #0
 800147c:	4618      	mov	r0, r3
 800147e:	f005 fd83 	bl	8006f88 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a20      	ldr	r2, [pc, #128]	; (8001508 <HAL_FDCAN_MspInit+0xac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d139      	bne.n	8001500 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8001492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fa47 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80014a8:	f7ff ffae 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_FDCAN_MspInit+0xb0>)
 80014ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b0:	4a16      	ldr	r2, [pc, #88]	; (800150c <HAL_FDCAN_MspInit+0xb0>)
 80014b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014b6:	6593      	str	r3, [r2, #88]	; 0x58
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_FDCAN_MspInit+0xb0>)
 80014ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c4:	4b11      	ldr	r3, [pc, #68]	; (800150c <HAL_FDCAN_MspInit+0xb0>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_FDCAN_MspInit+0xb0>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_FDCAN_MspInit+0xb0>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]
 80014da:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80014dc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80014e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80014ee:	2309      	movs	r3, #9
 80014f0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f001 faa6 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001500:	bf00      	nop
 8001502:	3778      	adds	r7, #120	; 0x78
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40006400 	.word	0x40006400
 800150c:	40021000 	.word	0x40021000

08001510 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08a      	sub	sp, #40	; 0x28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a17      	ldr	r2, [pc, #92]	; (800158c <HAL_SPI_MspInit+0x7c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d128      	bne.n	8001584 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_SPI_MspInit+0x80>)
 8001534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001536:	4a16      	ldr	r2, [pc, #88]	; (8001590 <HAL_SPI_MspInit+0x80>)
 8001538:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800153c:	6613      	str	r3, [r2, #96]	; 0x60
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_SPI_MspInit+0x80>)
 8001540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_SPI_MspInit+0x80>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_SPI_MspInit+0x80>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_SPI_MspInit+0x80>)
 8001558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001562:	23e0      	movs	r3, #224	; 0xe0
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001572:	2305      	movs	r3, #5
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f001 fa64 	bl	8002a4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40013000 	.word	0x40013000
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d114      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2100      	movs	r1, #0
 80015c2:	201c      	movs	r0, #28
 80015c4:	f000 fa9d 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015c8:	201c      	movs	r0, #28
 80015ca:	f000 fab4 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015ce:	e010      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_TIM_Base_MspInit+0x6c>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10b      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_TIM_Base_MspInit+0x68>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
}
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000
 8001600:	40000800 	.word	0x40000800

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b09e      	sub	sp, #120	; 0x78
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	2254      	movs	r2, #84	; 0x54
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f005 fcaf 	bl	8006f88 <memset>
  if(huart->Instance==USART1)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a38      	ldr	r2, [pc, #224]	; (8001710 <HAL_UART_MspInit+0x10c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d168      	bne.n	8001706 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001634:	2301      	movs	r3, #1
 8001636:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800163c:	f107 0310 	add.w	r3, r7, #16
 8001640:	4618      	mov	r0, r3
 8001642:	f002 f975 	bl	8003930 <HAL_RCCEx_PeriphCLKConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800164c:	f7ff fedc 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001650:	4b30      	ldr	r3, [pc, #192]	; (8001714 <HAL_UART_MspInit+0x110>)
 8001652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001654:	4a2f      	ldr	r2, [pc, #188]	; (8001714 <HAL_UART_MspInit+0x110>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	6613      	str	r3, [r2, #96]	; 0x60
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <HAL_UART_MspInit+0x110>)
 800165e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b2a      	ldr	r3, [pc, #168]	; (8001714 <HAL_UART_MspInit+0x110>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166c:	4a29      	ldr	r2, [pc, #164]	; (8001714 <HAL_UART_MspInit+0x110>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001674:	4b27      	ldr	r3, [pc, #156]	; (8001714 <HAL_UART_MspInit+0x110>)
 8001676:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001680:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001684:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001692:	2307      	movs	r3, #7
 8001694:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800169a:	4619      	mov	r1, r3
 800169c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a0:	f001 f9d4 	bl	8002a4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016a6:	4a1d      	ldr	r2, [pc, #116]	; (800171c <HAL_UART_MspInit+0x118>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016ac:	2218      	movs	r2, #24
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016be:	2280      	movs	r2, #128	; 0x80
 80016c0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016d0:	2220      	movs	r2, #32
 80016d2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016da:	480f      	ldr	r0, [pc, #60]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016dc:	f000 fa46 	bl	8001b6c <HAL_DMA_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 80016e6:	f7ff fe8f 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016ee:	67da      	str	r2, [r3, #124]	; 0x7c
 80016f0:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_UART_MspInit+0x114>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2025      	movs	r0, #37	; 0x25
 80016fc:	f000 fa01 	bl	8001b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001700:	2025      	movs	r0, #37	; 0x25
 8001702:	f000 fa18 	bl	8001b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3778      	adds	r7, #120	; 0x78
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40013800 	.word	0x40013800
 8001714:	40021000 	.word	0x40021000
 8001718:	20000220 	.word	0x20000220
 800171c:	40020008 	.word	0x40020008

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 f8ae 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001778:	4802      	ldr	r0, [pc, #8]	; (8001784 <DMA1_Channel1_IRQHandler+0x10>)
 800177a:	f000 fbda 	bl	8001f32 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000220 	.word	0x20000220

08001788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <TIM2_IRQHandler+0x10>)
 800178e:	f003 f87f 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200000f8 	.word	0x200000f8

0800179c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <USART1_IRQHandler+0x10>)
 80017a2:	f004 f82b 	bl	80057fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000190 	.word	0x20000190

080017b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <SystemInit+0x20>)
 80017b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <SystemInit+0x20>)
 80017bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80017d4:	480d      	ldr	r0, [pc, #52]	; (800180c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80017d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <LoopForever+0x6>)
  ldr r1, =_edata
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <LoopForever+0xe>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopForever+0x12>)
  ldr r4, =_ebss
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <LoopForever+0x16>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017fe:	f7ff ffd7 	bl	80017b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f005 fb8f 	bl	8006f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001806:	f7fe ffef 	bl	80007e8 <main>

0800180a <LoopForever>:

LoopForever:
    b LoopForever
 800180a:	e7fe      	b.n	800180a <LoopForever>
  ldr   r0, =_estack
 800180c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001818:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 800181c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001820:	2000034c 	.word	0x2000034c

08001824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC1_2_IRQHandler>

08001826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001830:	2003      	movs	r0, #3
 8001832:	f000 f95b 	bl	8001aec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001836:	200f      	movs	r0, #15
 8001838:	f000 f80e 	bl	8001858 <HAL_InitTick>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	e001      	b.n	800184c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001848:	f7ff fde4 	bl	8001414 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800184c:	79fb      	ldrb	r3, [r7, #7]

}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001860:	2300      	movs	r3, #0
 8001862:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_InitTick+0x68>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d022      	beq.n	80018b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800186c:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_InitTick+0x6c>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_InitTick+0x68>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001878:	fbb1 f3f3 	udiv	r3, r1, r3
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	4618      	mov	r0, r3
 8001882:	f000 f966 	bl	8001b52 <HAL_SYSTICK_Config>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10f      	bne.n	80018ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b0f      	cmp	r3, #15
 8001890:	d809      	bhi.n	80018a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001892:	2200      	movs	r2, #0
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	f04f 30ff 	mov.w	r0, #4294967295
 800189a:	f000 f932 	bl	8001b02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800189e:	4a0a      	ldr	r2, [pc, #40]	; (80018c8 <HAL_InitTick+0x70>)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e007      	b.n	80018b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	73fb      	strb	r3, [r7, #15]
 80018aa:	e004      	b.n	80018b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e001      	b.n	80018b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000010 	.word	0x20000010
 80018c4:	20000008 	.word	0x20000008
 80018c8:	2000000c 	.word	0x2000000c

080018cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <HAL_IncTick+0x1c>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_IncTick+0x20>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4413      	add	r3, r2
 80018da:	4a03      	ldr	r2, [pc, #12]	; (80018e8 <HAL_IncTick+0x1c>)
 80018dc:	6013      	str	r3, [r2, #0]
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	20000348 	.word	0x20000348
 80018ec:	20000010 	.word	0x20000010

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	20000348 	.word	0x20000348

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d004      	beq.n	800192c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_Delay+0x40>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192c:	bf00      	nop
 800192e:	f7ff ffdf 	bl	80018f0 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	429a      	cmp	r2, r3
 800193c:	d8f7      	bhi.n	800192e <HAL_Delay+0x26>
  {
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000010 	.word	0x20000010

0800194c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001968:	4013      	ands	r3, r2
 800196a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800197e:	4a04      	ldr	r2, [pc, #16]	; (8001990 <__NVIC_SetPriorityGrouping+0x44>)
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	60d3      	str	r3, [r2, #12]
}
 8001984:	bf00      	nop
 8001986:	3714      	adds	r7, #20
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <__NVIC_GetPriorityGrouping+0x18>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	f003 0307 	and.w	r3, r3, #7
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	db0b      	blt.n	80019da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	f003 021f 	and.w	r2, r3, #31
 80019c8:	4907      	ldr	r1, [pc, #28]	; (80019e8 <__NVIC_EnableIRQ+0x38>)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	095b      	lsrs	r3, r3, #5
 80019d0:	2001      	movs	r0, #1
 80019d2:	fa00 f202 	lsl.w	r2, r0, r2
 80019d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	6039      	str	r1, [r7, #0]
 80019f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	db0a      	blt.n	8001a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	490c      	ldr	r1, [pc, #48]	; (8001a38 <__NVIC_SetPriority+0x4c>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	b2d2      	uxtb	r2, r2
 8001a0e:	440b      	add	r3, r1
 8001a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a14:	e00a      	b.n	8001a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	4908      	ldr	r1, [pc, #32]	; (8001a3c <__NVIC_SetPriority+0x50>)
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	3b04      	subs	r3, #4
 8001a24:	0112      	lsls	r2, r2, #4
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	440b      	add	r3, r1
 8001a2a:	761a      	strb	r2, [r3, #24]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000e100 	.word	0xe000e100
 8001a3c:	e000ed00 	.word	0xe000ed00

08001a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	; 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f1c3 0307 	rsb	r3, r3, #7
 8001a5a:	2b04      	cmp	r3, #4
 8001a5c:	bf28      	it	cs
 8001a5e:	2304      	movcs	r3, #4
 8001a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	3304      	adds	r3, #4
 8001a66:	2b06      	cmp	r3, #6
 8001a68:	d902      	bls.n	8001a70 <NVIC_EncodePriority+0x30>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3b03      	subs	r3, #3
 8001a6e:	e000      	b.n	8001a72 <NVIC_EncodePriority+0x32>
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	f04f 32ff 	mov.w	r2, #4294967295
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43da      	mvns	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	401a      	ands	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a88:	f04f 31ff 	mov.w	r1, #4294967295
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a92:	43d9      	mvns	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	4313      	orrs	r3, r2
         );
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ab8:	d301      	bcc.n	8001abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00f      	b.n	8001ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001abe:	4a0a      	ldr	r2, [pc, #40]	; (8001ae8 <SysTick_Config+0x40>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8001acc:	f7ff ff8e 	bl	80019ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad0:	4b05      	ldr	r3, [pc, #20]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ad6:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <SysTick_Config+0x40>)
 8001ad8:	2207      	movs	r2, #7
 8001ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	e000e010 	.word	0xe000e010

08001aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff ff29 	bl	800194c <__NVIC_SetPriorityGrouping>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b086      	sub	sp, #24
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	4603      	mov	r3, r0
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b10:	f7ff ff40 	bl	8001994 <__NVIC_GetPriorityGrouping>
 8001b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	68b9      	ldr	r1, [r7, #8]
 8001b1a:	6978      	ldr	r0, [r7, #20]
 8001b1c:	f7ff ff90 	bl	8001a40 <NVIC_EncodePriority>
 8001b20:	4602      	mov	r2, r0
 8001b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff5f 	bl	80019ec <__NVIC_SetPriority>
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b082      	sub	sp, #8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff33 	bl	80019b0 <__NVIC_EnableIRQ>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f7ff ffa4 	bl	8001aa8 <SysTick_Config>
 8001b60:	4603      	mov	r3, r0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e08d      	b.n	8001c9a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	461a      	mov	r2, r3
 8001b84:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_DMA_Init+0x138>)
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d80f      	bhi.n	8001baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	4b45      	ldr	r3, [pc, #276]	; (8001ca8 <HAL_DMA_Init+0x13c>)
 8001b92:	4413      	add	r3, r2
 8001b94:	4a45      	ldr	r2, [pc, #276]	; (8001cac <HAL_DMA_Init+0x140>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	091b      	lsrs	r3, r3, #4
 8001b9c:	009a      	lsls	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <HAL_DMA_Init+0x144>)
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ba8:	e00e      	b.n	8001bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <HAL_DMA_Init+0x148>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a3d      	ldr	r2, [pc, #244]	; (8001cac <HAL_DMA_Init+0x140>)
 8001bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	009a      	lsls	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a3c      	ldr	r2, [pc, #240]	; (8001cb8 <HAL_DMA_Init+0x14c>)
 8001bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
 8001c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fa82 	bl	8002124 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c28:	d102      	bne.n	8001c30 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c44:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_DMA_Init+0x104>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d80c      	bhi.n	8001c70 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 faa2 	bl	80021a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e008      	b.n	8001c82 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020407 	.word	0x40020407
 8001ca8:	bffdfff8 	.word	0xbffdfff8
 8001cac:	cccccccd 	.word	0xcccccccd
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	bffdfbf8 	.word	0xbffdfbf8
 8001cb8:	40020400 	.word	0x40020400

08001cbc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
 8001cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_DMA_Start_IT+0x20>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e066      	b.n	8001daa <HAL_DMA_Start_IT+0xee>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d155      	bne.n	8001d9c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0201 	bic.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	68b9      	ldr	r1, [r7, #8]
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f9c7 	bl	80020a8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d008      	beq.n	8001d34 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 020e 	orr.w	r2, r2, #14
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e00f      	b.n	8001d54 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0204 	bic.w	r2, r2, #4
 8001d42:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 020a 	orr.w	r2, r2, #10
 8001d52:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d007      	beq.n	8001d72 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d70:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d007      	beq.n	8001d8a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d88:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e005      	b.n	8001da8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3718      	adds	r7, #24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b085      	sub	sp, #20
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d005      	beq.n	8001dd6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2204      	movs	r2, #4
 8001dce:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
 8001dd4:	e037      	b.n	8001e46 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f022 020e 	bic.w	r2, r2, #14
 8001de4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 0201 	bic.w	r2, r2, #1
 8001e04:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 021f 	and.w	r2, r3, #31
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	2101      	movs	r1, #1
 8001e14:	fa01 f202 	lsl.w	r2, r1, r2
 8001e18:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e22:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d00c      	beq.n	8001e46 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e3a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e44:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d00d      	beq.n	8001e98 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	73fb      	strb	r3, [r7, #15]
 8001e96:	e047      	b.n	8001f28 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f022 020e 	bic.w	r2, r2, #14
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 0201 	bic.w	r2, r2, #1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ec6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eda:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ee4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00c      	beq.n	8001f08 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001f06:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
    }
  }
  return status;
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	2204      	movs	r2, #4
 8001f54:	409a      	lsls	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d026      	beq.n	8001fac <HAL_DMA_IRQHandler+0x7a>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f003 0304 	and.w	r3, r3, #4
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d021      	beq.n	8001fac <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d107      	bne.n	8001f86 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0204 	bic.w	r2, r2, #4
 8001f84:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	f003 021f 	and.w	r2, r3, #31
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2104      	movs	r1, #4
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d071      	beq.n	8002086 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001faa:	e06c      	b.n	8002086 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	409a      	lsls	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d02e      	beq.n	800201e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d029      	beq.n	800201e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10b      	bne.n	8001ff0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f022 020a 	bic.w	r2, r2, #10
 8001fe6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8002002:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d038      	beq.n	8002086 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800201c:	e033      	b.n	8002086 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2208      	movs	r2, #8
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d02a      	beq.n	8002088 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d025      	beq.n	8002088 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 020e 	bic.w	r2, r2, #14
 800204a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	f003 021f 	and.w	r2, r3, #31
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002058:	2101      	movs	r1, #1
 800205a:	fa01 f202 	lsl.w	r2, r1, r2
 800205e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2201      	movs	r2, #1
 8002064:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800207a:	2b00      	cmp	r3, #0
 800207c:	d004      	beq.n	8002088 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002086:	bf00      	nop
 8002088:	bf00      	nop
}
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020be:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d004      	beq.n	80020d2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020d0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	2101      	movs	r1, #1
 80020e0:	fa01 f202 	lsl.w	r2, r1, r2
 80020e4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b10      	cmp	r3, #16
 80020f4:	d108      	bne.n	8002108 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002106:	e007      	b.n	8002118 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b087      	sub	sp, #28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d802      	bhi.n	800213e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002138:	4b15      	ldr	r3, [pc, #84]	; (8002190 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800213a:	617b      	str	r3, [r7, #20]
 800213c:	e001      	b.n	8002142 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800213e:	4b15      	ldr	r3, [pc, #84]	; (8002194 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002140:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	3b08      	subs	r3, #8
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002150:	fba2 2303 	umull	r2, r3, r2, r3
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215c:	089b      	lsrs	r3, r3, #2
 800215e:	009a      	lsls	r2, r3, #2
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4413      	add	r3, r2
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a0b      	ldr	r2, [pc, #44]	; (800219c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800216e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	2201      	movs	r2, #1
 8002178:	409a      	lsls	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	40020407 	.word	0x40020407
 8002190:	40020800 	.word	0x40020800
 8002194:	40020820 	.word	0x40020820
 8002198:	cccccccd 	.word	0xcccccccd
 800219c:	40020880 	.word	0x40020880

080021a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	461a      	mov	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f003 031f 	and.w	r3, r3, #31
 80021cc:	2201      	movs	r2, #1
 80021ce:	409a      	lsls	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	1000823f 	.word	0x1000823f
 80021e4:	40020940 	.word	0x40020940

080021e8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e147      	b.n	800248a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d106      	bne.n	8002214 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff f924 	bl	800145c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699a      	ldr	r2, [r3, #24]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0210 	bic.w	r2, r2, #16
 8002222:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002224:	f7ff fb64 	bl	80018f0 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800222a:	e012      	b.n	8002252 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800222c:	f7ff fb60 	bl	80018f0 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b0a      	cmp	r3, #10
 8002238:	d90b      	bls.n	8002252 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2203      	movs	r2, #3
 800224a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e11b      	b.n	800248a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f003 0308 	and.w	r3, r3, #8
 800225c:	2b08      	cmp	r3, #8
 800225e:	d0e5      	beq.n	800222c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002270:	f7ff fb3e 	bl	80018f0 <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002276:	e012      	b.n	800229e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002278:	f7ff fb3a 	bl	80018f0 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b0a      	cmp	r3, #10
 8002284:	d90b      	bls.n	800229e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228a:	f043 0201 	orr.w	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e0f5      	b.n	800248a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0e5      	beq.n	8002278 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699a      	ldr	r2, [r3, #24]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f042 0202 	orr.w	r2, r2, #2
 80022ba:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a74      	ldr	r2, [pc, #464]	; (8002494 <HAL_FDCAN_Init+0x2ac>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d103      	bne.n	80022ce <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80022c6:	4a74      	ldr	r2, [pc, #464]	; (8002498 <HAL_FDCAN_Init+0x2b0>)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	7c1b      	ldrb	r3, [r3, #16]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d108      	bne.n	80022e8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	699a      	ldr	r2, [r3, #24]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022e4:	619a      	str	r2, [r3, #24]
 80022e6:	e007      	b.n	80022f8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699a      	ldr	r2, [r3, #24]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7c5b      	ldrb	r3, [r3, #17]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d108      	bne.n	8002312 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699a      	ldr	r2, [r3, #24]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800230e:	619a      	str	r2, [r3, #24]
 8002310:	e007      	b.n	8002322 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002320:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7c9b      	ldrb	r3, [r3, #18]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d108      	bne.n	800233c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699a      	ldr	r2, [r3, #24]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002338:	619a      	str	r2, [r3, #24]
 800233a:	e007      	b.n	800234c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800234a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002370:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691a      	ldr	r2, [r3, #16]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f022 0210 	bic.w	r2, r2, #16
 8002380:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699a      	ldr	r2, [r3, #24]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f042 0204 	orr.w	r2, r2, #4
 8002398:	619a      	str	r2, [r3, #24]
 800239a:	e02c      	b.n	80023f6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d028      	beq.n	80023f6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d01c      	beq.n	80023e6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ba:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691a      	ldr	r2, [r3, #16]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0210 	orr.w	r2, r2, #16
 80023ca:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d110      	bne.n	80023f6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699a      	ldr	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0220 	orr.w	r2, r2, #32
 80023e2:	619a      	str	r2, [r3, #24]
 80023e4:	e007      	b.n	80023f6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0220 	orr.w	r2, r2, #32
 80023f4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69db      	ldr	r3, [r3, #28]
 8002402:	3b01      	subs	r3, #1
 8002404:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002406:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800240e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	3b01      	subs	r3, #1
 8002418:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800241e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002420:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800242a:	d115      	bne.n	8002458 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	3b01      	subs	r3, #1
 8002438:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800243a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	3b01      	subs	r3, #1
 8002442:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002444:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244c:	3b01      	subs	r3, #1
 800244e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002454:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002456:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa04 	bl	800287c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40006400 	.word	0x40006400
 8002498:	40006500 	.word	0x40006500

0800249c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800249c:	b480      	push	{r7}
 800249e:	b087      	sub	sp, #28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80024ac:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80024ae:	7dfb      	ldrb	r3, [r7, #23]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d002      	beq.n	80024ba <HAL_FDCAN_ConfigFilter+0x1e>
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d13d      	bne.n	8002536 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80024ce:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 80024d6:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80024dc:	4313      	orrs	r3, r2
 80024de:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	e01d      	b.n	8002532 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	075a      	lsls	r2, r3, #29
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	079a      	lsls	r2, r3, #30
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4413      	add	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3304      	adds	r3, #4
 800252a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e006      	b.n	8002544 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
  }
}
 8002544:	4618      	mov	r0, r3
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d116      	bne.n	8002598 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002572:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	011a      	lsls	r2, r3, #4
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	431a      	orrs	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	431a      	orrs	r2, r3
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	431a      	orrs	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e006      	b.n	80025a6 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	f043 0204 	orr.w	r2, r3, #4
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d110      	bne.n	80025e8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 0201 	bic.w	r2, r2, #1
 80025dc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	e006      	b.n	80025f6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ec:	f043 0204 	orr.w	r2, r3, #4
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
  }
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d12c      	bne.n	8002674 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e023      	b.n	8002682 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002642:	0c1b      	lsrs	r3, r3, #16
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f000 f97f 	bl	8002954 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2101      	movs	r1, #1
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	fa01 f202 	lsl.w	r2, r1, r2
 8002662:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002666:	2201      	movs	r2, #1
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	e006      	b.n	8002682 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002678:	f043 0208 	orr.w	r2, r3, #8
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
  }
}
 8002682:	4618      	mov	r0, r3
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
	...

0800268c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800268c:	b480      	push	{r7}
 800268e:	b08b      	sub	sp, #44	; 0x2c
 8002690:	af00      	add	r7, sp, #0
 8002692:	60f8      	str	r0, [r7, #12]
 8002694:	60b9      	str	r1, [r7, #8]
 8002696:	607a      	str	r2, [r7, #4]
 8002698:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026a0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80026a2:	7efb      	ldrb	r3, [r7, #27]
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	f040 80bc 	bne.w	8002822 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b40      	cmp	r3, #64	; 0x40
 80026ae:	d121      	bne.n	80026f4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e0af      	b.n	8002830 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	4613      	mov	r3, r2
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e020      	b.n	8002736 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	2b00      	cmp	r3, #0
 8002702:	d107      	bne.n	8002714 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002708:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e08d      	b.n	8002830 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	f003 0303 	and.w	r3, r3, #3
 8002722:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002728:	69fa      	ldr	r2, [r7, #28]
 800272a:	4613      	mov	r3, r2
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	440b      	add	r3, r1
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d107      	bne.n	800275a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e005      	b.n	8002766 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	3304      	adds	r3, #4
 8002782:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	b29a      	uxth	r2, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	0e1b      	lsrs	r3, r3, #24
 80027b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0fda      	lsrs	r2, r3, #31
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	3304      	adds	r3, #4
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	e00a      	b.n	80027f0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	441a      	add	r2, r3
 80027e0:	6839      	ldr	r1, [r7, #0]
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	440b      	add	r3, r1
 80027e6:	7812      	ldrb	r2, [r2, #0]
 80027e8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	3301      	adds	r3, #1
 80027ee:	623b      	str	r3, [r7, #32]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	4a11      	ldr	r2, [pc, #68]	; (800283c <HAL_FDCAN_GetRxMessage+0x1b0>)
 80027f8:	5cd3      	ldrb	r3, [r2, r3]
 80027fa:	461a      	mov	r2, r3
 80027fc:	6a3b      	ldr	r3, [r7, #32]
 80027fe:	4293      	cmp	r3, r2
 8002800:	d3eb      	bcc.n	80027da <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b40      	cmp	r3, #64	; 0x40
 8002806:	d105      	bne.n	8002814 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002812:	e004      	b.n	800281e <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	e006      	b.n	8002830 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002826:	f043 0208 	orr.w	r2, r3, #8
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	372c      	adds	r7, #44	; 0x2c
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	080071c8 	.word	0x080071c8

08002840 <HAL_FDCAN_GetRxFifoFillLevel>:
  *           @arg FDCAN_RX_FIFO0: Rx FIFO 0
  *           @arg FDCAN_RX_FIFO1: Rx FIFO 1
  * @retval Rx FIFO fill level.
  */
uint32_t HAL_FDCAN_GetRxFifoFillLevel(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t FillLevel;

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxFifo));

  if (RxFifo == FDCAN_RX_FIFO0)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d107      	bne.n	8002860 <HAL_FDCAN_GetRxFifoFillLevel+0x20>
  {
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	e006      	b.n	800286e <HAL_FDCAN_GetRxFifoFillLevel+0x2e>
  }
  else /* RxFifo == FDCAN_RX_FIFO1 */
  {
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	60fb      	str	r3, [r7, #12]
  }

  /* Return Rx FIFO fill level */
  return FillLevel;
 800286e:	68fb      	ldr	r3, [r7, #12]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002886:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a2f      	ldr	r2, [pc, #188]	; (800294c <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d103      	bne.n	800289a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002898:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a2c      	ldr	r2, [pc, #176]	; (8002950 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d103      	bne.n	80028ac <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80028aa:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ba:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	041a      	lsls	r2, r3, #16
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028e0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	061a      	lsls	r2, r3, #24
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60fb      	str	r3, [r7, #12]
 8002920:	e005      	b.n	800292e <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3304      	adds	r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3f3      	bcc.n	8002922 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	4000a400 	.word	0x4000a400
 800294c:	40006800 	.word	0x40006800
 8002950:	40006c00 	.word	0x40006c00

08002954 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10a      	bne.n	8002980 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002972:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800297a:	4313      	orrs	r3, r2
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e00a      	b.n	8002996 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002988:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800298e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002994:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80029a0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80029a6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80029ac:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	4613      	mov	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	3304      	adds	r3, #4
 80029d2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	3304      	adds	r3, #4
 80029de:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e020      	b.n	8002a28 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	3303      	adds	r3, #3
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4413      	add	r3, r2
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3302      	adds	r3, #2
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	440b      	add	r3, r1
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029fe:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	440b      	add	r3, r1
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002a0c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	440a      	add	r2, r1
 8002a14:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002a16:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3304      	adds	r3, #4
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	0c1b      	lsrs	r3, r3, #16
 8002a2e:	4a06      	ldr	r2, [pc, #24]	; (8002a48 <FDCAN_CopyMessageToRAM+0xf4>)
 8002a30:	5cd3      	ldrb	r3, [r2, r3]
 8002a32:	461a      	mov	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d3d5      	bcc.n	80029e6 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	3724      	adds	r7, #36	; 0x24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	080071c8 	.word	0x080071c8

08002a4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a5a:	e15a      	b.n	8002d12 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2101      	movs	r1, #1
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	4013      	ands	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 814c 	beq.w	8002d0c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d005      	beq.n	8002a8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d130      	bne.n	8002aee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	2203      	movs	r2, #3
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	091b      	lsrs	r3, r3, #4
 8002ad8:	f003 0201 	and.w	r2, r3, #1
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	d017      	beq.n	8002b2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	2203      	movs	r2, #3
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	689a      	ldr	r2, [r3, #8]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	693a      	ldr	r2, [r7, #16]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d123      	bne.n	8002b7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	08da      	lsrs	r2, r3, #3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3208      	adds	r2, #8
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	691a      	ldr	r2, [r3, #16]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	08da      	lsrs	r2, r3, #3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3208      	adds	r2, #8
 8002b78:	6939      	ldr	r1, [r7, #16]
 8002b7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	005b      	lsls	r3, r3, #1
 8002b88:	2203      	movs	r2, #3
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	4013      	ands	r3, r2
 8002b94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f003 0203 	and.w	r2, r3, #3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc4:	4a5a      	ldr	r2, [pc, #360]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002bc6:	f043 0301 	orr.w	r3, r3, #1
 8002bca:	6613      	str	r3, [r2, #96]	; 0x60
 8002bcc:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <HAL_GPIO_Init+0x2e4>)
 8002bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd8:	4a56      	ldr	r2, [pc, #344]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c02:	d01f      	beq.n	8002c44 <HAL_GPIO_Init+0x1f8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a4c      	ldr	r2, [pc, #304]	; (8002d38 <HAL_GPIO_Init+0x2ec>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d019      	beq.n	8002c40 <HAL_GPIO_Init+0x1f4>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a4b      	ldr	r2, [pc, #300]	; (8002d3c <HAL_GPIO_Init+0x2f0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <HAL_GPIO_Init+0x1f0>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	; (8002d40 <HAL_GPIO_Init+0x2f4>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00d      	beq.n	8002c38 <HAL_GPIO_Init+0x1ec>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <HAL_GPIO_Init+0x2f8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <HAL_GPIO_Init+0x1e8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a48      	ldr	r2, [pc, #288]	; (8002d48 <HAL_GPIO_Init+0x2fc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d101      	bne.n	8002c30 <HAL_GPIO_Init+0x1e4>
 8002c2c:	2305      	movs	r3, #5
 8002c2e:	e00a      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c30:	2306      	movs	r3, #6
 8002c32:	e008      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_GPIO_Init+0x1fa>
 8002c44:	2300      	movs	r3, #0
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	f002 0203 	and.w	r2, r2, #3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c56:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_GPIO_Init+0x2e8>)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c64:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c88:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c8e:	4b2f      	ldr	r3, [pc, #188]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cb2:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002cb8:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d06:	4a11      	ldr	r2, [pc, #68]	; (8002d4c <HAL_GPIO_Init+0x300>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f ae9d 	bne.w	8002a5c <HAL_GPIO_Init+0x10>
  }
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010000 	.word	0x40010000
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48000800 	.word	0x48000800
 8002d40:	48000c00 	.word	0x48000c00
 8002d44:	48001000 	.word	0x48001000
 8002d48:	48001400 	.word	0x48001400
 8002d4c:	40010400 	.word	0x40010400

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6e:	887a      	ldrh	r2, [r7, #2]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d141      	bne.n	8002e12 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d8e:	4b4b      	ldr	r3, [pc, #300]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9a:	d131      	bne.n	8002e00 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d9c:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da2:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002db4:	4a41      	ldr	r2, [pc, #260]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dbc:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2232      	movs	r2, #50	; 0x32
 8002dc2:	fb02 f303 	mul.w	r3, r2, r3
 8002dc6:	4a3f      	ldr	r2, [pc, #252]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	0c9b      	lsrs	r3, r3, #18
 8002dce:	3301      	adds	r3, #1
 8002dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dd2:	e002      	b.n	8002dda <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dda:	4b38      	ldr	r3, [pc, #224]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002de6:	d102      	bne.n	8002dee <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f2      	bne.n	8002dd4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002dee:	4b33      	ldr	r3, [pc, #204]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfa:	d158      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e057      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e00:	4b2e      	ldr	r3, [pc, #184]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e06:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e10:	e04d      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e18:	d141      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e26:	d131      	bne.n	8002e8c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e2e:	4a23      	ldr	r2, [pc, #140]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e40:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e48:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2232      	movs	r2, #50	; 0x32
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a1c      	ldr	r2, [pc, #112]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	0c9b      	lsrs	r3, r3, #18
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e5e:	e002      	b.n	8002e66 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e72:	d102      	bne.n	8002e7a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f2      	bne.n	8002e60 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e86:	d112      	bne.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e011      	b.n	8002eb0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e9c:	e007      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e9e:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ea6:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	20000008 	.word	0x20000008
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e306      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d075      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee6:	4b97      	ldr	r3, [pc, #604]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef0:	4b94      	ldr	r3, [pc, #592]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	2b0c      	cmp	r3, #12
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_OscConfig+0x3e>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d002      	beq.n	8002f0c <HAL_RCC_OscConfig+0x44>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d10b      	bne.n	8002f24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f0c:	4b8d      	ldr	r3, [pc, #564]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d05b      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x108>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d157      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e2e1      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2c:	d106      	bne.n	8002f3c <HAL_RCC_OscConfig+0x74>
 8002f2e:	4b85      	ldr	r3, [pc, #532]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a84      	ldr	r2, [pc, #528]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x98>
 8002f46:	4b7f      	ldr	r3, [pc, #508]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b7c      	ldr	r3, [pc, #496]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a7b      	ldr	r2, [pc, #492]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xb0>
 8002f60:	4b78      	ldr	r3, [pc, #480]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a77      	ldr	r2, [pc, #476]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b75      	ldr	r3, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a74      	ldr	r2, [pc, #464]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f80:	f7fe fcb6 	bl	80018f0 <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7fe fcb2 	bl	80018f0 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	; 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e2a6      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f9a:	4b6a      	ldr	r3, [pc, #424]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xc0>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fca2 	bl	80018f0 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7fe fc9e 	bl	80018f0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e292      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fc2:	4b60      	ldr	r3, [pc, #384]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0xe8>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d075      	beq.n	80030ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fde:	4b59      	ldr	r3, [pc, #356]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe8:	4b56      	ldr	r3, [pc, #344]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	2b0c      	cmp	r3, #12
 8002ff6:	d102      	bne.n	8002ffe <HAL_RCC_OscConfig+0x136>
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_OscConfig+0x13c>
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d11f      	bne.n	8003044 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d005      	beq.n	800301c <HAL_RCC_OscConfig+0x154>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d101      	bne.n	800301c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e265      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301c:	4b49      	ldr	r3, [pc, #292]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	061b      	lsls	r3, r3, #24
 800302a:	4946      	ldr	r1, [pc, #280]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003030:	4b45      	ldr	r3, [pc, #276]	; (8003148 <HAL_RCC_OscConfig+0x280>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fc0f 	bl	8001858 <HAL_InitTick>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d043      	beq.n	80030c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e251      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d023      	beq.n	8003094 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800304c:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a3c      	ldr	r2, [pc, #240]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8003052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003056:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003058:	f7fe fc4a 	bl	80018f0 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003060:	f7fe fc46 	bl	80018f0 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e23a      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307a:	2b00      	cmp	r3, #0
 800307c:	d0f0      	beq.n	8003060 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	061b      	lsls	r3, r3, #24
 800308c:	492d      	ldr	r1, [pc, #180]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
 8003092:	e01a      	b.n	80030ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a2a      	ldr	r2, [pc, #168]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800309a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a0:	f7fe fc26 	bl	80018f0 <HAL_GetTick>
 80030a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fe fc22 	bl	80018f0 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e216      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030ba:	4b22      	ldr	r3, [pc, #136]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f0      	bne.n	80030a8 <HAL_RCC_OscConfig+0x1e0>
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0308 	and.w	r3, r3, #8
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d041      	beq.n	800315a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d01c      	beq.n	8003118 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030de:	4b19      	ldr	r3, [pc, #100]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fe fbff 	bl	80018f0 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fbfb 	bl	80018f0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1ef      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003108:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0ef      	beq.n	80030f6 <HAL_RCC_OscConfig+0x22e>
 8003116:	e020      	b.n	800315a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003118:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800311a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003128:	f7fe fbe2 	bl	80018f0 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800312e:	e00d      	b.n	800314c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003130:	f7fe fbde 	bl	80018f0 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d906      	bls.n	800314c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1d2      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800314c:	4b8c      	ldr	r3, [pc, #560]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 800314e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1ea      	bne.n	8003130 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80a6 	beq.w	80032b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003168:	2300      	movs	r3, #0
 800316a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800316c:	4b84      	ldr	r3, [pc, #528]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_RCC_OscConfig+0x2b4>
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x2b6>
 800317c:	2300      	movs	r3, #0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00d      	beq.n	800319e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	4b7f      	ldr	r3, [pc, #508]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a7e      	ldr	r2, [pc, #504]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
 800318e:	4b7c      	ldr	r3, [pc, #496]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800319a:	2301      	movs	r3, #1
 800319c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319e:	4b79      	ldr	r3, [pc, #484]	; (8003384 <HAL_RCC_OscConfig+0x4bc>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d118      	bne.n	80031dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031aa:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCC_OscConfig+0x4bc>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a75      	ldr	r2, [pc, #468]	; (8003384 <HAL_RCC_OscConfig+0x4bc>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b6:	f7fe fb9b 	bl	80018f0 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031be:	f7fe fb97 	bl	80018f0 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e18b      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031d0:	4b6c      	ldr	r3, [pc, #432]	; (8003384 <HAL_RCC_OscConfig+0x4bc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d108      	bne.n	80031f6 <HAL_RCC_OscConfig+0x32e>
 80031e4:	4b66      	ldr	r3, [pc, #408]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80031e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ea:	4a65      	ldr	r2, [pc, #404]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031f4:	e024      	b.n	8003240 <HAL_RCC_OscConfig+0x378>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d110      	bne.n	8003220 <HAL_RCC_OscConfig+0x358>
 80031fe:	4b60      	ldr	r3, [pc, #384]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	4a5e      	ldr	r2, [pc, #376]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003206:	f043 0304 	orr.w	r3, r3, #4
 800320a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800320e:	4b5c      	ldr	r3, [pc, #368]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	4a5a      	ldr	r2, [pc, #360]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800321e:	e00f      	b.n	8003240 <HAL_RCC_OscConfig+0x378>
 8003220:	4b57      	ldr	r3, [pc, #348]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003230:	4b53      	ldr	r3, [pc, #332]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	4a52      	ldr	r2, [pc, #328]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003238:	f023 0304 	bic.w	r3, r3, #4
 800323c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d016      	beq.n	8003276 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe fb52 	bl	80018f0 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	e00a      	b.n	8003266 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003250:	f7fe fb4e 	bl	80018f0 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	f241 3288 	movw	r2, #5000	; 0x1388
 800325e:	4293      	cmp	r3, r2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e140      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003266:	4b46      	ldr	r3, [pc, #280]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800326c:	f003 0302 	and.w	r3, r3, #2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0ed      	beq.n	8003250 <HAL_RCC_OscConfig+0x388>
 8003274:	e015      	b.n	80032a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003276:	f7fe fb3b 	bl	80018f0 <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800327c:	e00a      	b.n	8003294 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327e:	f7fe fb37 	bl	80018f0 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	f241 3288 	movw	r2, #5000	; 0x1388
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e129      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003294:	4b3a      	ldr	r3, [pc, #232]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1ed      	bne.n	800327e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032a2:	7ffb      	ldrb	r3, [r7, #31]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d105      	bne.n	80032b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a8:	4b35      	ldr	r3, [pc, #212]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	4a34      	ldr	r2, [pc, #208]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80032ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d03c      	beq.n	800333a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d01c      	beq.n	8003302 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032c8:	4b2d      	ldr	r3, [pc, #180]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ce:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe fb0a 	bl	80018f0 <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032e0:	f7fe fb06 	bl	80018f0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e0fa      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032f2:	4b23      	ldr	r3, [pc, #140]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 80032f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ef      	beq.n	80032e0 <HAL_RCC_OscConfig+0x418>
 8003300:	e01b      	b.n	800333a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003302:	4b1f      	ldr	r3, [pc, #124]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003308:	4a1d      	ldr	r2, [pc, #116]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f023 0301 	bic.w	r3, r3, #1
 800330e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003312:	f7fe faed 	bl	80018f0 <HAL_GetTick>
 8003316:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003318:	e008      	b.n	800332c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331a:	f7fe fae9 	bl	80018f0 <HAL_GetTick>
 800331e:	4602      	mov	r2, r0
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d901      	bls.n	800332c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003328:	2303      	movs	r3, #3
 800332a:	e0dd      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800332c:	4b14      	ldr	r3, [pc, #80]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1ef      	bne.n	800331a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 80d1 	beq.w	80034e6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b0c      	cmp	r3, #12
 800334e:	f000 808b 	beq.w	8003468 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	2b02      	cmp	r3, #2
 8003358:	d15e      	bne.n	8003418 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a08      	ldr	r2, [pc, #32]	; (8003380 <HAL_RCC_OscConfig+0x4b8>)
 8003360:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fe fac3 	bl	80018f0 <HAL_GetTick>
 800336a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336c:	e00c      	b.n	8003388 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336e:	f7fe fabf 	bl	80018f0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d905      	bls.n	8003388 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e0b3      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
 8003380:	40021000 	.word	0x40021000
 8003384:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d1ec      	bne.n	800336e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003394:	4b56      	ldr	r3, [pc, #344]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	4b56      	ldr	r3, [pc, #344]	; (80034f4 <HAL_RCC_OscConfig+0x62c>)
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6a11      	ldr	r1, [r2, #32]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033a4:	3a01      	subs	r2, #1
 80033a6:	0112      	lsls	r2, r2, #4
 80033a8:	4311      	orrs	r1, r2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033ae:	0212      	lsls	r2, r2, #8
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0552      	lsls	r2, r2, #21
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033c2:	0852      	lsrs	r2, r2, #1
 80033c4:	3a01      	subs	r2, #1
 80033c6:	0652      	lsls	r2, r2, #25
 80033c8:	4311      	orrs	r1, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80033ce:	06d2      	lsls	r2, r2, #27
 80033d0:	430a      	orrs	r2, r1
 80033d2:	4947      	ldr	r1, [pc, #284]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033d8:	4b45      	ldr	r3, [pc, #276]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a44      	ldr	r2, [pc, #272]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033e4:	4b42      	ldr	r3, [pc, #264]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	4a41      	ldr	r2, [pc, #260]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 80033ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f0:	f7fe fa7e 	bl	80018f0 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f6:	e008      	b.n	800340a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033f8:	f7fe fa7a 	bl	80018f0 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d901      	bls.n	800340a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e06e      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800340a:	4b39      	ldr	r3, [pc, #228]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d0f0      	beq.n	80033f8 <HAL_RCC_OscConfig+0x530>
 8003416:	e066      	b.n	80034e6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003418:	4b35      	ldr	r3, [pc, #212]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a34      	ldr	r2, [pc, #208]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 800341e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003422:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003430:	4b2f      	ldr	r3, [pc, #188]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 8003436:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003440:	f7fe fa56 	bl	80018f0 <HAL_GetTick>
 8003444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003446:	e008      	b.n	800345a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003448:	f7fe fa52 	bl	80018f0 <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	2b02      	cmp	r3, #2
 8003454:	d901      	bls.n	800345a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e046      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800345a:	4b25      	ldr	r3, [pc, #148]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1f0      	bne.n	8003448 <HAL_RCC_OscConfig+0x580>
 8003466:	e03e      	b.n	80034e6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e039      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003474:	4b1e      	ldr	r3, [pc, #120]	; (80034f0 <HAL_RCC_OscConfig+0x628>)
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f003 0203 	and.w	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a1b      	ldr	r3, [r3, #32]
 8003484:	429a      	cmp	r2, r3
 8003486:	d12c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	3b01      	subs	r3, #1
 8003494:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003496:	429a      	cmp	r2, r3
 8003498:	d123      	bne.n	80034e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d11b      	bne.n	80034e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d113      	bne.n	80034e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	3b01      	subs	r3, #1
 80034c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d109      	bne.n	80034e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	3b01      	subs	r3, #1
 80034dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034de:	429a      	cmp	r2, r3
 80034e0:	d001      	beq.n	80034e6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	019f800c 	.word	0x019f800c

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e11e      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003510:	4b91      	ldr	r3, [pc, #580]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d910      	bls.n	8003540 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b8e      	ldr	r3, [pc, #568]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 020f 	bic.w	r2, r3, #15
 8003526:	498c      	ldr	r1, [pc, #560]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b8a      	ldr	r3, [pc, #552]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 030f 	and.w	r3, r3, #15
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e106      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d073      	beq.n	8003634 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b03      	cmp	r3, #3
 8003552:	d129      	bne.n	80035a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003554:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d101      	bne.n	8003564 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0f4      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003564:	f000 f99e 	bl	80038a4 <RCC_GetSysClockFreqFromPLLSource>
 8003568:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a7c      	ldr	r2, [pc, #496]	; (8003760 <HAL_RCC_ClockConfig+0x268>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d93f      	bls.n	80035f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003572:	4b7a      	ldr	r3, [pc, #488]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003586:	2b00      	cmp	r3, #0
 8003588:	d033      	beq.n	80035f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800358e:	2b00      	cmp	r3, #0
 8003590:	d12f      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003592:	4b72      	ldr	r3, [pc, #456]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800359a:	4a70      	ldr	r2, [pc, #448]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 800359c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	617b      	str	r3, [r7, #20]
 80035a6:	e024      	b.n	80035f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d107      	bne.n	80035c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0c6      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c0:	4b66      	ldr	r3, [pc, #408]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0be      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80035d0:	f000 f8ce 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 80035d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4a61      	ldr	r2, [pc, #388]	; (8003760 <HAL_RCC_ClockConfig+0x268>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d909      	bls.n	80035f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035de:	4b5f      	ldr	r3, [pc, #380]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035e6:	4a5d      	ldr	r2, [pc, #372]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80035ee:	2380      	movs	r3, #128	; 0x80
 80035f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b5a      	ldr	r3, [pc, #360]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4957      	ldr	r1, [pc, #348]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003600:	4313      	orrs	r3, r2
 8003602:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003604:	f7fe f974 	bl	80018f0 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fe f970 	bl	80018f0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e095      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b4e      	ldr	r3, [pc, #312]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d023      	beq.n	8003688 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0304 	and.w	r3, r3, #4
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800364c:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a42      	ldr	r2, [pc, #264]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003652:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003656:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003664:	4b3d      	ldr	r3, [pc, #244]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800366c:	4a3b      	ldr	r2, [pc, #236]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 800366e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003672:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b39      	ldr	r3, [pc, #228]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	4936      	ldr	r1, [pc, #216]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
 8003686:	e008      	b.n	800369a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	2b80      	cmp	r3, #128	; 0x80
 800368c:	d105      	bne.n	800369a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800368e:	4b33      	ldr	r3, [pc, #204]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4a32      	ldr	r2, [pc, #200]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003694:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003698:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800369a:	4b2f      	ldr	r3, [pc, #188]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d21d      	bcs.n	80036e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a8:	4b2b      	ldr	r3, [pc, #172]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f023 020f 	bic.w	r2, r3, #15
 80036b0:	4929      	ldr	r1, [pc, #164]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036b8:	f7fe f91a 	bl	80018f0 <HAL_GetTick>
 80036bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c0:	f7fe f916 	bl	80018f0 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e03b      	b.n	800374e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCC_ClockConfig+0x260>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d1ed      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	4917      	ldr	r1, [pc, #92]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800370e:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	490f      	ldr	r1, [pc, #60]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 800371e:	4313      	orrs	r3, r2
 8003720:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003722:	f000 f825 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8003726:	4602      	mov	r2, r0
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <HAL_RCC_ClockConfig+0x264>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	490c      	ldr	r1, [pc, #48]	; (8003764 <HAL_RCC_ClockConfig+0x26c>)
 8003734:	5ccb      	ldrb	r3, [r1, r3]
 8003736:	f003 031f 	and.w	r3, r3, #31
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x270>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_RCC_ClockConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe f886 	bl	8001858 <HAL_InitTick>
 800374c:	4603      	mov	r3, r0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40022000 	.word	0x40022000
 800375c:	40021000 	.word	0x40021000
 8003760:	04c4b400 	.word	0x04c4b400
 8003764:	080071b0 	.word	0x080071b0
 8003768:	20000008 	.word	0x20000008
 800376c:	2000000c 	.word	0x2000000c

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 030c 	and.w	r3, r3, #12
 800377e:	2b04      	cmp	r3, #4
 8003780:	d102      	bne.n	8003788 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003782:	4b2a      	ldr	r3, [pc, #168]	; (800382c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003784:	613b      	str	r3, [r7, #16]
 8003786:	e047      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003788:	4b27      	ldr	r3, [pc, #156]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 030c 	and.w	r3, r3, #12
 8003790:	2b08      	cmp	r3, #8
 8003792:	d102      	bne.n	800379a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003794:	4b26      	ldr	r3, [pc, #152]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	e03e      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	d136      	bne.n	8003814 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a6:	4b20      	ldr	r3, [pc, #128]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	3301      	adds	r3, #1
 80037bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d10c      	bne.n	80037de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c4:	4a1a      	ldr	r2, [pc, #104]	; (8003830 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037cc:	4a16      	ldr	r2, [pc, #88]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ce:	68d2      	ldr	r2, [r2, #12]
 80037d0:	0a12      	lsrs	r2, r2, #8
 80037d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037d6:	fb02 f303 	mul.w	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
      break;
 80037dc:	e00c      	b.n	80037f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037de:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_RCC_GetSysClockFreq+0xbc>)
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e8:	68d2      	ldr	r2, [r2, #12]
 80037ea:	0a12      	lsrs	r2, r2, #8
 80037ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037f0:	fb02 f303 	mul.w	r3, r2, r3
 80037f4:	617b      	str	r3, [r7, #20]
      break;
 80037f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	0e5b      	lsrs	r3, r3, #25
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	3301      	adds	r3, #1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e001      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003818:	693b      	ldr	r3, [r7, #16]
}
 800381a:	4618      	mov	r0, r3
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
 800382c:	00f42400 	.word	0x00f42400
 8003830:	007a1200 	.word	0x007a1200

08003834 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003838:	4b03      	ldr	r3, [pc, #12]	; (8003848 <HAL_RCC_GetHCLKFreq+0x14>)
 800383a:	681b      	ldr	r3, [r3, #0]
}
 800383c:	4618      	mov	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000008 	.word	0x20000008

0800384c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003850:	f7ff fff0 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b06      	ldr	r3, [pc, #24]	; (8003870 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0a1b      	lsrs	r3, r3, #8
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800386c:	4618      	mov	r0, r3
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40021000 	.word	0x40021000
 8003874:	080071c0 	.word	0x080071c0

08003878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800387c:	f7ff ffda 	bl	8003834 <HAL_RCC_GetHCLKFreq>
 8003880:	4602      	mov	r2, r0
 8003882:	4b06      	ldr	r3, [pc, #24]	; (800389c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	0adb      	lsrs	r3, r3, #11
 8003888:	f003 0307 	and.w	r3, r3, #7
 800388c:	4904      	ldr	r1, [pc, #16]	; (80038a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800388e:	5ccb      	ldrb	r3, [r1, r3]
 8003890:	f003 031f 	and.w	r3, r3, #31
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003898:	4618      	mov	r0, r3
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40021000 	.word	0x40021000
 80038a0:	080071c0 	.word	0x080071c0

080038a4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038aa:	4b1e      	ldr	r3, [pc, #120]	; (8003924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b4:	4b1b      	ldr	r3, [pc, #108]	; (8003924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3301      	adds	r3, #1
 80038c0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d10c      	bne.n	80038e2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c8:	4a17      	ldr	r2, [pc, #92]	; (8003928 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	4a14      	ldr	r2, [pc, #80]	; (8003924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038d2:	68d2      	ldr	r2, [r2, #12]
 80038d4:	0a12      	lsrs	r2, r2, #8
 80038d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	617b      	str	r3, [r7, #20]
    break;
 80038e0:	e00c      	b.n	80038fc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038e2:	4a12      	ldr	r2, [pc, #72]	; (800392c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0a12      	lsrs	r2, r2, #8
 80038f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
    break;
 80038fa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038fc:	4b09      	ldr	r3, [pc, #36]	; (8003924 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0e5b      	lsrs	r3, r3, #25
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003916:	687b      	ldr	r3, [r7, #4]
}
 8003918:	4618      	mov	r0, r3
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	40021000 	.word	0x40021000
 8003928:	007a1200 	.word	0x007a1200
 800392c:	00f42400 	.word	0x00f42400

08003930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003938:	2300      	movs	r3, #0
 800393a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800393c:	2300      	movs	r3, #0
 800393e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8098 	beq.w	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10d      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	4b40      	ldr	r3, [pc, #256]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	4a3f      	ldr	r2, [pc, #252]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003968:	6593      	str	r3, [r2, #88]	; 0x58
 800396a:	4b3d      	ldr	r3, [pc, #244]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003976:	2301      	movs	r3, #1
 8003978:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800397a:	4b3a      	ldr	r3, [pc, #232]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a39      	ldr	r2, [pc, #228]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003980:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003986:	f7fd ffb3 	bl	80018f0 <HAL_GetTick>
 800398a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800398c:	e009      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398e:	f7fd ffaf 	bl	80018f0 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d902      	bls.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	74fb      	strb	r3, [r7, #19]
        break;
 80039a0:	e005      	b.n	80039ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039a2:	4b30      	ldr	r3, [pc, #192]	; (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ef      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039ae:	7cfb      	ldrb	r3, [r7, #19]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d159      	bne.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039b4:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039be:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01e      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d019      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039d0:	4b23      	ldr	r3, [pc, #140]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039dc:	4b20      	ldr	r3, [pc, #128]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039ec:	4b1c      	ldr	r3, [pc, #112]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	4a1b      	ldr	r2, [pc, #108]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d016      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fd ff6f 	bl	80018f0 <HAL_GetTick>
 8003a12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a14:	e00b      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a16:	f7fd ff6b 	bl	80018f0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d902      	bls.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a2c:	e006      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ec      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a3c:	7cfb      	ldrb	r3, [r7, #19]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10b      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a50:	4903      	ldr	r1, [pc, #12]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a58:	e008      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a5a:	7cfb      	ldrb	r3, [r7, #19]
 8003a5c:	74bb      	strb	r3, [r7, #18]
 8003a5e:	e005      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a68:	7cfb      	ldrb	r3, [r7, #19]
 8003a6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6c:	7c7b      	ldrb	r3, [r7, #17]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d105      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a72:	4ba7      	ldr	r3, [pc, #668]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a76:	4aa6      	ldr	r2, [pc, #664]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00a      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a8a:	4ba1      	ldr	r3, [pc, #644]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a90:	f023 0203 	bic.w	r2, r3, #3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	499d      	ldr	r1, [pc, #628]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0302 	and.w	r3, r3, #2
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003aac:	4b98      	ldr	r3, [pc, #608]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab2:	f023 020c 	bic.w	r2, r3, #12
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	4995      	ldr	r1, [pc, #596]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003abc:	4313      	orrs	r3, r2
 8003abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0304 	and.w	r3, r3, #4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ace:	4b90      	ldr	r3, [pc, #576]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	498c      	ldr	r1, [pc, #560]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0308 	and.w	r3, r3, #8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003af0:	4b87      	ldr	r3, [pc, #540]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	4984      	ldr	r1, [pc, #528]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b12:	4b7f      	ldr	r3, [pc, #508]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	497b      	ldr	r1, [pc, #492]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0320 	and.w	r3, r3, #32
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b34:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	4973      	ldr	r1, [pc, #460]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b56:	4b6e      	ldr	r3, [pc, #440]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69db      	ldr	r3, [r3, #28]
 8003b64:	496a      	ldr	r1, [pc, #424]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b78:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4962      	ldr	r1, [pc, #392]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b9a:	4b5d      	ldr	r3, [pc, #372]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	4959      	ldr	r1, [pc, #356]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bbc:	4b54      	ldr	r3, [pc, #336]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	4951      	ldr	r1, [pc, #324]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bde:	4b4c      	ldr	r3, [pc, #304]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4948      	ldr	r1, [pc, #288]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d015      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4940      	ldr	r1, [pc, #256]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1e:	d105      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c20:	4b3b      	ldr	r3, [pc, #236]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4a3a      	ldr	r2, [pc, #232]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c3e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	4932      	ldr	r1, [pc, #200]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c56:	d105      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c58:	4b2d      	ldr	r3, [pc, #180]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c70:	4b27      	ldr	r3, [pc, #156]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	4924      	ldr	r1, [pc, #144]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c8e:	d105      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c90:	4b1f      	ldr	r3, [pc, #124]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a1e      	ldr	r2, [pc, #120]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d015      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca8:	4b19      	ldr	r3, [pc, #100]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb6:	4916      	ldr	r1, [pc, #88]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc6:	d105      	bne.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc8:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a10      	ldr	r2, [pc, #64]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cd2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d019      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	4908      	ldr	r1, [pc, #32]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cfe:	d109      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d00:	4b03      	ldr	r3, [pc, #12]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a02      	ldr	r2, [pc, #8]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d0a:	60d3      	str	r3, [r2, #12]
 8003d0c:	e002      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d015      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	4926      	ldr	r1, [pc, #152]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d40:	4b21      	ldr	r3, [pc, #132]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	4a20      	ldr	r2, [pc, #128]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d015      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003d58:	4b1b      	ldr	r3, [pc, #108]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d66:	4918      	ldr	r1, [pc, #96]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d76:	d105      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d78:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4a12      	ldr	r2, [pc, #72]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d015      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d90:	4b0d      	ldr	r3, [pc, #52]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003d92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	490a      	ldr	r1, [pc, #40]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003da0:	4313      	orrs	r3, r2
 8003da2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dae:	d105      	bne.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003dbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3718      	adds	r7, #24
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e09d      	b.n	8003f1a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d108      	bne.n	8003df8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dee:	d009      	beq.n	8003e04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	61da      	str	r2, [r3, #28]
 8003df6:	e005      	b.n	8003e04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fb76 	bl	8001510 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e44:	d902      	bls.n	8003e4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e46:	2300      	movs	r3, #0
 8003e48:	60fb      	str	r3, [r7, #12]
 8003e4a:	e002      	b.n	8003e52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e5a:	d007      	beq.n	8003e6c <HAL_SPI_Init+0xa0>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e64:	d002      	beq.n	8003e6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69db      	ldr	r3, [r3, #28]
 8003ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eae:	ea42 0103 	orr.w	r1, r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	0c1b      	lsrs	r3, r3, #16
 8003ec8:	f003 0204 	and.w	r2, r3, #4
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0310 	and.w	r3, r3, #16
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ee8:	ea42 0103 	orr.w	r1, r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b08a      	sub	sp, #40	; 0x28
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	60f8      	str	r0, [r7, #12]
 8003f2a:	60b9      	str	r1, [r7, #8]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f30:	2301      	movs	r3, #1
 8003f32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_SPI_TransmitReceive+0x26>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e1fb      	b.n	8004340 <HAL_SPI_TransmitReceive+0x41e>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f50:	f7fd fcce 	bl	80018f0 <HAL_GetTick>
 8003f54:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f5c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003f64:	887b      	ldrh	r3, [r7, #2]
 8003f66:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f6c:	7efb      	ldrb	r3, [r7, #27]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d00e      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x6e>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f78:	d106      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d102      	bne.n	8003f88 <HAL_SPI_TransmitReceive+0x66>
 8003f82:	7efb      	ldrb	r3, [r7, #27]
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d003      	beq.n	8003f90 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
 8003f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003f8e:	e1cd      	b.n	800432c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x80>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x80>
 8003f9c:	887b      	ldrh	r3, [r7, #2]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d103      	bne.n	8003faa <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003fa8:	e1c0      	b.n	800432c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d003      	beq.n	8003fbe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2205      	movs	r2, #5
 8003fba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	887a      	ldrh	r2, [r7, #2]
 8003fce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	887a      	ldrh	r2, [r7, #2]
 8003fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	887a      	ldrh	r2, [r7, #2]
 8003fea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004000:	d802      	bhi.n	8004008 <HAL_SPI_TransmitReceive+0xe6>
 8004002:	8a3b      	ldrh	r3, [r7, #16]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d908      	bls.n	800401a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004016:	605a      	str	r2, [r3, #4]
 8004018:	e007      	b.n	800402a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d007      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004046:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004050:	d97c      	bls.n	800414c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x13e>
 800405a:	8a7b      	ldrh	r3, [r7, #18]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d169      	bne.n	8004134 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004064:	881a      	ldrh	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004070:	1c9a      	adds	r2, r3, #2
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29a      	uxth	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004084:	e056      	b.n	8004134 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0302 	and.w	r3, r3, #2
 8004090:	2b02      	cmp	r3, #2
 8004092:	d11b      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x1aa>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_SPI_TransmitReceive+0x1aa>
 800409e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d113      	bne.n	80040cc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	881a      	ldrh	r2, [r3, #0]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d11c      	bne.n	8004114 <HAL_SPI_TransmitReceive+0x1f2>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68da      	ldr	r2, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	b292      	uxth	r2, r2
 80040f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004110:	2301      	movs	r3, #1
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004114:	f7fd fbec 	bl	80018f0 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004120:	429a      	cmp	r2, r3
 8004122:	d807      	bhi.n	8004134 <HAL_SPI_TransmitReceive+0x212>
 8004124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412a:	d003      	beq.n	8004134 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004132:	e0fb      	b.n	800432c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1a3      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x164>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d19d      	bne.n	8004086 <HAL_SPI_TransmitReceive+0x164>
 800414a:	e0df      	b.n	800430c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <HAL_SPI_TransmitReceive+0x23a>
 8004154:	8a7b      	ldrh	r3, [r7, #18]
 8004156:	2b01      	cmp	r3, #1
 8004158:	f040 80cb 	bne.w	80042f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d912      	bls.n	800418c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416a:	881a      	ldrh	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	1c9a      	adds	r2, r3, #2
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004180:	b29b      	uxth	r3, r3
 8004182:	3b02      	subs	r3, #2
 8004184:	b29a      	uxth	r2, r3
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800418a:	e0b2      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	7812      	ldrb	r2, [r2, #0]
 8004198:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b2:	e09e      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d134      	bne.n	800422c <HAL_SPI_TransmitReceive+0x30a>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d02f      	beq.n	800422c <HAL_SPI_TransmitReceive+0x30a>
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d12c      	bne.n	800422c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d912      	bls.n	8004202 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	1c9a      	adds	r2, r3, #2
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b02      	subs	r3, #2
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004200:	e012      	b.n	8004228 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	2b01      	cmp	r3, #1
 8004238:	d148      	bne.n	80042cc <HAL_SPI_TransmitReceive+0x3aa>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d042      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b01      	cmp	r3, #1
 8004250:	d923      	bls.n	800429a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425c:	b292      	uxth	r2, r2
 800425e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	1c9a      	adds	r2, r3, #2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b02      	subs	r3, #2
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	d81f      	bhi.n	80042c8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	e016      	b.n	80042c8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f103 020c 	add.w	r2, r3, #12
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	7812      	ldrb	r2, [r2, #0]
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80042bc:	b29b      	uxth	r3, r3
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042c8:	2301      	movs	r3, #1
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042cc:	f7fd fb10 	bl	80018f0 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d8:	429a      	cmp	r2, r3
 80042da:	d803      	bhi.n	80042e4 <HAL_SPI_TransmitReceive+0x3c2>
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d102      	bne.n	80042ea <HAL_SPI_TransmitReceive+0x3c8>
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d103      	bne.n	80042f2 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80042f0:	e01c      	b.n	800432c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f47f af5b 	bne.w	80041b4 <HAL_SPI_TransmitReceive+0x292>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	f47f af54 	bne.w	80041b4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800430c:	69fa      	ldr	r2, [r7, #28]
 800430e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f937 	bl	8004584 <SPI_EndRxTxTransaction>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d006      	beq.n	800432a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	661a      	str	r2, [r3, #96]	; 0x60
 8004328:	e000      	b.n	800432c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800432a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800433c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004340:	4618      	mov	r0, r3
 8004342:	3728      	adds	r7, #40	; 0x28
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b088      	sub	sp, #32
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004358:	f7fd faca 	bl	80018f0 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	4413      	add	r3, r2
 8004366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004368:	f7fd fac2 	bl	80018f0 <HAL_GetTick>
 800436c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800436e:	4b39      	ldr	r3, [pc, #228]	; (8004454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	015b      	lsls	r3, r3, #5
 8004374:	0d1b      	lsrs	r3, r3, #20
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	fb02 f303 	mul.w	r3, r2, r3
 800437c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800437e:	e054      	b.n	800442a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004386:	d050      	beq.n	800442a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004388:	f7fd fab2 	bl	80018f0 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	429a      	cmp	r2, r3
 8004396:	d902      	bls.n	800439e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d13d      	bne.n	800441a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043b6:	d111      	bne.n	80043dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c0:	d004      	beq.n	80043cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ca:	d107      	bne.n	80043dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e4:	d10f      	bne.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e017      	b.n	800444a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	3b01      	subs	r3, #1
 8004428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4013      	ands	r3, r2
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	bf0c      	ite	eq
 800443a:	2301      	moveq	r3, #1
 800443c:	2300      	movne	r3, #0
 800443e:	b2db      	uxtb	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	429a      	cmp	r2, r3
 8004446:	d19b      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000008 	.word	0x20000008

08004458 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b08a      	sub	sp, #40	; 0x28
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004466:	2300      	movs	r3, #0
 8004468:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800446a:	f7fd fa41 	bl	80018f0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	1a9b      	subs	r3, r3, r2
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	4413      	add	r3, r2
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800447a:	f7fd fa39 	bl	80018f0 <HAL_GetTick>
 800447e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004488:	4b3d      	ldr	r3, [pc, #244]	; (8004580 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00da      	lsls	r2, r3, #3
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	0d1b      	lsrs	r3, r3, #20
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	fb02 f303 	mul.w	r3, r2, r3
 800449e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80044a0:	e060      	b.n	8004564 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80044a8:	d107      	bne.n	80044ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d050      	beq.n	8004564 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044c2:	f7fd fa15 	bl	80018f0 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d902      	bls.n	80044d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d13d      	bne.n	8004554 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044f0:	d111      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fa:	d004      	beq.n	8004506 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004504:	d107      	bne.n	8004516 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004514:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451e:	d10f      	bne.n	8004540 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800453e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e010      	b.n	8004576 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	3b01      	subs	r3, #1
 8004562:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	d196      	bne.n	80044a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3728      	adds	r7, #40	; 0x28
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000008 	.word	0x20000008

08004584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b086      	sub	sp, #24
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2200      	movs	r2, #0
 8004598:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f7ff ff5b 	bl	8004458 <SPI_WaitFifoStateUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ac:	f043 0220 	orr.w	r2, r3, #32
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e027      	b.n	8004608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2200      	movs	r2, #0
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f7ff fec0 	bl	8004348 <SPI_WaitFlagStateUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045d2:	f043 0220 	orr.w	r2, r3, #32
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e014      	b.n	8004608 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f7ff ff34 	bl	8004458 <SPI_WaitFifoStateUntilTimeout>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045fa:	f043 0220 	orr.w	r2, r3, #32
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e000      	b.n	8004608 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e049      	b.n	80046b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004628:	b2db      	uxtb	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d106      	bne.n	800463c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f7fc ffac 	bl	8001594 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3304      	adds	r3, #4
 800464c:	4619      	mov	r1, r3
 800464e:	4610      	mov	r0, r2
 8004650:	f000 fbdc 	bl	8004e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3708      	adds	r7, #8
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d001      	beq.n	80046d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e04c      	b.n	8004772 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a26      	ldr	r2, [pc, #152]	; (8004780 <HAL_TIM_Base_Start+0xc0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d01d      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <HAL_TIM_Base_Start+0xc4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a21      	ldr	r2, [pc, #132]	; (8004788 <HAL_TIM_Base_Start+0xc8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1f      	ldr	r2, [pc, #124]	; (800478c <HAL_TIM_Base_Start+0xcc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1e      	ldr	r2, [pc, #120]	; (8004790 <HAL_TIM_Base_Start+0xd0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_TIM_Base_Start+0xd4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIM_Base_Start+0x70>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a1b      	ldr	r2, [pc, #108]	; (8004798 <HAL_TIM_Base_Start+0xd8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d115      	bne.n	800475c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689a      	ldr	r2, [r3, #8]
 8004736:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_TIM_Base_Start+0xdc>)
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b06      	cmp	r3, #6
 8004740:	d015      	beq.n	800476e <HAL_TIM_Base_Start+0xae>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004748:	d011      	beq.n	800476e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475a:	e008      	b.n	800476e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	e000      	b.n	8004770 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40014000 	.word	0x40014000
 8004798:	40015000 	.word	0x40015000
 800479c:	00010007 	.word	0x00010007

080047a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b085      	sub	sp, #20
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d001      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e054      	b.n	8004862 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0201 	orr.w	r2, r2, #1
 80047ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a26      	ldr	r2, [pc, #152]	; (8004870 <HAL_TIM_Base_Start_IT+0xd0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d01d      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a22      	ldr	r2, [pc, #136]	; (8004874 <HAL_TIM_Base_Start_IT+0xd4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a21      	ldr	r2, [pc, #132]	; (8004878 <HAL_TIM_Base_Start_IT+0xd8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <HAL_TIM_Base_Start_IT+0xdc>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a1e      	ldr	r2, [pc, #120]	; (8004880 <HAL_TIM_Base_Start_IT+0xe0>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_TIM_Base_Start_IT+0xe4>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x80>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1b      	ldr	r2, [pc, #108]	; (8004888 <HAL_TIM_Base_Start_IT+0xe8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d115      	bne.n	800484c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b19      	ldr	r3, [pc, #100]	; (800488c <HAL_TIM_Base_Start_IT+0xec>)
 8004828:	4013      	ands	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d015      	beq.n	800485e <HAL_TIM_Base_Start_IT+0xbe>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d011      	beq.n	800485e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e008      	b.n	800485e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e000      	b.n	8004860 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40000400 	.word	0x40000400
 8004878:	40000800 	.word	0x40000800
 800487c:	40000c00 	.word	0x40000c00
 8004880:	40013400 	.word	0x40013400
 8004884:	40014000 	.word	0x40014000
 8004888:	40015000 	.word	0x40015000
 800488c:	00010007 	.word	0x00010007

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0202 	mvn.w	r2, #2
 80048bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fa7c 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa6e 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fa7f 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa52 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa44 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fa55 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0308 	and.w	r3, r3, #8
 800494a:	2b08      	cmp	r3, #8
 800494c:	d122      	bne.n	8004994 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d11b      	bne.n	8004994 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0208 	mvn.w	r2, #8
 8004964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2204      	movs	r2, #4
 800496a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa28 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004980:	e005      	b.n	800498e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 fa1a 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fa2b 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b10      	cmp	r3, #16
 80049a0:	d122      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d11b      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9fe 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f9f0 	bl	8004dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 fa01 	bl	8004de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d10e      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d107      	bne.n	8004a14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f06f 0201 	mvn.w	r2, #1
 8004a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fb fe78 	bl	8000704 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1e:	2b80      	cmp	r3, #128	; 0x80
 8004a20:	d10e      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a2c:	2b80      	cmp	r3, #128	; 0x80
 8004a2e:	d107      	bne.n	8004a40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 fbca 	bl	80051d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d10e      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5a:	2b80      	cmp	r3, #128	; 0x80
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fbbd 	bl	80051e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b40      	cmp	r3, #64	; 0x40
 8004a7a:	d10e      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	d107      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f9af 	bl	8004df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d10e      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d107      	bne.n	8004ac6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f06f 0220 	mvn.w	r2, #32
 8004abe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb7d 	bl	80051c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ad4:	d10f      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae4:	d107      	bne.n	8004af6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fb83 	bl	80051fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b04:	d10f      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b14:	d107      	bne.n	8004b26 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fb75 	bl	8005210 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b34:	d10f      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb67 	bl	8005224 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b60:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b64:	d10f      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 fb59 	bl	8005238 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b86:	bf00      	nop
 8004b88:	3708      	adds	r7, #8
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
	...

08004b90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d101      	bne.n	8004bac <HAL_TIM_ConfigClockSource+0x1c>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	e0f6      	b.n	8004d9a <HAL_TIM_ConfigClockSource+0x20a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004bca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a6f      	ldr	r2, [pc, #444]	; (8004da4 <HAL_TIM_ConfigClockSource+0x214>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	f000 80c1 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004bec:	4a6d      	ldr	r2, [pc, #436]	; (8004da4 <HAL_TIM_ConfigClockSource+0x214>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	f200 80c6 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004bf4:	4a6c      	ldr	r2, [pc, #432]	; (8004da8 <HAL_TIM_ConfigClockSource+0x218>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	f000 80b9 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004bfc:	4a6a      	ldr	r2, [pc, #424]	; (8004da8 <HAL_TIM_ConfigClockSource+0x218>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	f200 80be 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c04:	4a69      	ldr	r2, [pc, #420]	; (8004dac <HAL_TIM_ConfigClockSource+0x21c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	f000 80b1 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c0c:	4a67      	ldr	r2, [pc, #412]	; (8004dac <HAL_TIM_ConfigClockSource+0x21c>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	f200 80b6 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c14:	4a66      	ldr	r2, [pc, #408]	; (8004db0 <HAL_TIM_ConfigClockSource+0x220>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	f000 80a9 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c1c:	4a64      	ldr	r2, [pc, #400]	; (8004db0 <HAL_TIM_ConfigClockSource+0x220>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f200 80ae 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c24:	4a63      	ldr	r2, [pc, #396]	; (8004db4 <HAL_TIM_ConfigClockSource+0x224>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f000 80a1 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c2c:	4a61      	ldr	r2, [pc, #388]	; (8004db4 <HAL_TIM_ConfigClockSource+0x224>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f200 80a6 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c34:	4a60      	ldr	r2, [pc, #384]	; (8004db8 <HAL_TIM_ConfigClockSource+0x228>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 8099 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	; (8004db8 <HAL_TIM_ConfigClockSource+0x228>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f200 809e 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c44:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c48:	f000 8091 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c50:	f200 8096 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c58:	f000 8089 	beq.w	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004c5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c60:	f200 808e 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c68:	d03e      	beq.n	8004ce8 <HAL_TIM_ConfigClockSource+0x158>
 8004c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c6e:	f200 8087 	bhi.w	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c76:	f000 8086 	beq.w	8004d86 <HAL_TIM_ConfigClockSource+0x1f6>
 8004c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c7e:	d87f      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c80:	2b70      	cmp	r3, #112	; 0x70
 8004c82:	d01a      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x12a>
 8004c84:	2b70      	cmp	r3, #112	; 0x70
 8004c86:	d87b      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c88:	2b60      	cmp	r3, #96	; 0x60
 8004c8a:	d050      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x19e>
 8004c8c:	2b60      	cmp	r3, #96	; 0x60
 8004c8e:	d877      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c90:	2b50      	cmp	r3, #80	; 0x50
 8004c92:	d03c      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x17e>
 8004c94:	2b50      	cmp	r3, #80	; 0x50
 8004c96:	d873      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c98:	2b40      	cmp	r3, #64	; 0x40
 8004c9a:	d058      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x1be>
 8004c9c:	2b40      	cmp	r3, #64	; 0x40
 8004c9e:	d86f      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ca0:	2b30      	cmp	r3, #48	; 0x30
 8004ca2:	d064      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004ca4:	2b30      	cmp	r3, #48	; 0x30
 8004ca6:	d86b      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d060      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004cac:	2b20      	cmp	r3, #32
 8004cae:	d867      	bhi.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d05c      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004cb4:	2b10      	cmp	r3, #16
 8004cb6:	d05a      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x1de>
 8004cb8:	e062      	b.n	8004d80 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6818      	ldr	r0, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	6899      	ldr	r1, [r3, #8]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	f000 f9c3 	bl	8005054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004cdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	609a      	str	r2, [r3, #8]
      break;
 8004ce6:	e04f      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	6899      	ldr	r1, [r3, #8]
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f000 f9ac 	bl	8005054 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d0a:	609a      	str	r2, [r3, #8]
      break;
 8004d0c:	e03c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 f91e 	bl	8004f5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2150      	movs	r1, #80	; 0x50
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f977 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e02c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 f93d 	bl	8004fba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2160      	movs	r1, #96	; 0x60
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 f967 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e01c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 f8fe 	bl	8004f5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2140      	movs	r1, #64	; 0x40
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 f957 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e00c      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f000 f94e 	bl	800501a <TIM_ITRx_SetConfig>
      break;
 8004d7e:	e003      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	73fb      	strb	r3, [r7, #15]
      break;
 8004d84:	e000      	b.n	8004d88 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004d86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	00100070 	.word	0x00100070
 8004da8:	00100060 	.word	0x00100060
 8004dac:	00100050 	.word	0x00100050
 8004db0:	00100040 	.word	0x00100040
 8004db4:	00100030 	.word	0x00100030
 8004db8:	00100020 	.word	0x00100020

08004dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a46      	ldr	r2, [pc, #280]	; (8004f38 <TIM_Base_SetConfig+0x12c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d017      	beq.n	8004e54 <TIM_Base_SetConfig+0x48>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2a:	d013      	beq.n	8004e54 <TIM_Base_SetConfig+0x48>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a43      	ldr	r2, [pc, #268]	; (8004f3c <TIM_Base_SetConfig+0x130>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00f      	beq.n	8004e54 <TIM_Base_SetConfig+0x48>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a42      	ldr	r2, [pc, #264]	; (8004f40 <TIM_Base_SetConfig+0x134>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_Base_SetConfig+0x48>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a41      	ldr	r2, [pc, #260]	; (8004f44 <TIM_Base_SetConfig+0x138>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_Base_SetConfig+0x48>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a40      	ldr	r2, [pc, #256]	; (8004f48 <TIM_Base_SetConfig+0x13c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0x48>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3f      	ldr	r2, [pc, #252]	; (8004f4c <TIM_Base_SetConfig+0x140>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a33      	ldr	r2, [pc, #204]	; (8004f38 <TIM_Base_SetConfig+0x12c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d023      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e74:	d01f      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a30      	ldr	r2, [pc, #192]	; (8004f3c <TIM_Base_SetConfig+0x130>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <TIM_Base_SetConfig+0x134>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d017      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	4a2e      	ldr	r2, [pc, #184]	; (8004f44 <TIM_Base_SetConfig+0x138>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d013      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	4a2d      	ldr	r2, [pc, #180]	; (8004f48 <TIM_Base_SetConfig+0x13c>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00f      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a2d      	ldr	r2, [pc, #180]	; (8004f50 <TIM_Base_SetConfig+0x144>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d00b      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <TIM_Base_SetConfig+0x148>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d007      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a2b      	ldr	r2, [pc, #172]	; (8004f58 <TIM_Base_SetConfig+0x14c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d003      	beq.n	8004eb6 <TIM_Base_SetConfig+0xaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a26      	ldr	r2, [pc, #152]	; (8004f4c <TIM_Base_SetConfig+0x140>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d108      	bne.n	8004ec8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a12      	ldr	r2, [pc, #72]	; (8004f38 <TIM_Base_SetConfig+0x12c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d013      	beq.n	8004f1c <TIM_Base_SetConfig+0x110>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a14      	ldr	r2, [pc, #80]	; (8004f48 <TIM_Base_SetConfig+0x13c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00f      	beq.n	8004f1c <TIM_Base_SetConfig+0x110>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a14      	ldr	r2, [pc, #80]	; (8004f50 <TIM_Base_SetConfig+0x144>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d00b      	beq.n	8004f1c <TIM_Base_SetConfig+0x110>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <TIM_Base_SetConfig+0x148>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d007      	beq.n	8004f1c <TIM_Base_SetConfig+0x110>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <TIM_Base_SetConfig+0x14c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d003      	beq.n	8004f1c <TIM_Base_SetConfig+0x110>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a0d      	ldr	r2, [pc, #52]	; (8004f4c <TIM_Base_SetConfig+0x140>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d103      	bne.n	8004f24 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	615a      	str	r2, [r3, #20]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	40012c00 	.word	0x40012c00
 8004f3c:	40000400 	.word	0x40000400
 8004f40:	40000800 	.word	0x40000800
 8004f44:	40000c00 	.word	0x40000c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40015000 	.word	0x40015000
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40014400 	.word	0x40014400
 8004f58:	40014800 	.word	0x40014800

08004f5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f023 0201 	bic.w	r2, r3, #1
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	011b      	lsls	r3, r3, #4
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f023 030a 	bic.w	r3, r3, #10
 8004f98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b087      	sub	sp, #28
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	f023 0210 	bic.w	r2, r3, #16
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	031b      	lsls	r3, r3, #12
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	697a      	ldr	r2, [r7, #20]
 8005006:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr

0800501a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800501a:	b480      	push	{r7}
 800501c:	b085      	sub	sp, #20
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	f043 0307 	orr.w	r3, r3, #7
 8005040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	609a      	str	r2, [r3, #8]
}
 8005048:	bf00      	nop
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	431a      	orrs	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	4313      	orrs	r3, r2
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	4313      	orrs	r3, r2
 8005080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	697a      	ldr	r2, [r7, #20]
 8005086:	609a      	str	r2, [r3, #8]
}
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e074      	b.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2202      	movs	r2, #2
 80050b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a34      	ldr	r2, [pc, #208]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a33      	ldr	r2, [pc, #204]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a31      	ldr	r2, [pc, #196]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d108      	bne.n	80050fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80050f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4313      	orrs	r3, r2
 8005110:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a21      	ldr	r2, [pc, #132]	; (80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d022      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512c:	d01d      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1f      	ldr	r2, [pc, #124]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d018      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d013      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a1c      	ldr	r2, [pc, #112]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d00e      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a15      	ldr	r2, [pc, #84]	; (80051a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d009      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d004      	beq.n	800516a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a11      	ldr	r2, [pc, #68]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d10c      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005170:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4313      	orrs	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40013400 	.word	0x40013400
 80051ac:	40015000 	.word	0x40015000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40014000 	.word	0x40014000

080051c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d101      	bne.n	800525e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e042      	b.n	80052e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005264:	2b00      	cmp	r3, #0
 8005266:	d106      	bne.n	8005276 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f7fc f9c7 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2224      	movs	r2, #36	; 0x24
 800527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0201 	bic.w	r2, r2, #1
 800528c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fdf6 	bl	8005e80 <UART_SetConfig>
 8005294:	4603      	mov	r3, r0
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e022      	b.n	80052e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 f8e6 	bl	8006478 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689a      	ldr	r2, [r3, #8]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f042 0201 	orr.w	r2, r2, #1
 80052da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f001 f96d 	bl	80065bc <UART_CheckIdleState>
 80052e2:	4603      	mov	r3, r0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af02      	add	r7, sp, #8
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	603b      	str	r3, [r7, #0]
 80052f8:	4613      	mov	r3, r2
 80052fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005302:	2b20      	cmp	r3, #32
 8005304:	f040 8083 	bne.w	800540e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_UART_Transmit+0x28>
 800530e:	88fb      	ldrh	r3, [r7, #6]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d101      	bne.n	8005318 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e07b      	b.n	8005410 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_UART_Transmit+0x3a>
 8005322:	2302      	movs	r3, #2
 8005324:	e074      	b.n	8005410 <HAL_UART_Transmit+0x124>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2200      	movs	r2, #0
 8005332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2221      	movs	r2, #33	; 0x21
 800533a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800533e:	f7fc fad7 	bl	80018f0 <HAL_GetTick>
 8005342:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	88fa      	ldrh	r2, [r7, #6]
 8005350:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800535c:	d108      	bne.n	8005370 <HAL_UART_Transmit+0x84>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005366:	2300      	movs	r3, #0
 8005368:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	e003      	b.n	8005378 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005374:	2300      	movs	r3, #0
 8005376:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005380:	e02c      	b.n	80053dc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2200      	movs	r2, #0
 800538a:	2180      	movs	r1, #128	; 0x80
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f001 f960 	bl	8006652 <UART_WaitOnFlagUntilTimeout>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d001      	beq.n	800539c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e039      	b.n	8005410 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10b      	bne.n	80053ba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	461a      	mov	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	3302      	adds	r3, #2
 80053b6:	61bb      	str	r3, [r7, #24]
 80053b8:	e007      	b.n	80053ca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	781a      	ldrb	r2, [r3, #0]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	3301      	adds	r3, #1
 80053c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b01      	subs	r3, #1
 80053d4:	b29a      	uxth	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1cc      	bne.n	8005382 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	2140      	movs	r1, #64	; 0x40
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f001 f92d 	bl	8006652 <UART_WaitOnFlagUntilTimeout>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e006      	b.n	8005410 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
  }
}
 8005410:	4618      	mov	r0, r3
 8005412:	3720      	adds	r7, #32
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b08a      	sub	sp, #40	; 0x28
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	4613      	mov	r3, r2
 8005424:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	2b20      	cmp	r3, #32
 800542e:	d142      	bne.n	80054b6 <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_UART_Receive_DMA+0x24>
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d101      	bne.n	8005440 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e03b      	b.n	80054b8 <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_UART_Receive_DMA+0x36>
 800544a:	2302      	movs	r3, #2
 800544c:	e034      	b.n	80054b8 <HAL_UART_Receive_DMA+0xa0>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2200      	movs	r2, #0
 800545a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_UART_Receive_DMA+0xa8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01f      	beq.n	80054a6 <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d018      	beq.n	80054a6 <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	613b      	str	r3, [r7, #16]
   return(result);
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	623b      	str	r3, [r7, #32]
 8005494:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	69f9      	ldr	r1, [r7, #28]
 8005498:	6a3a      	ldr	r2, [r7, #32]
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	61bb      	str	r3, [r7, #24]
   return(result);
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e6      	bne.n	8005474 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054a6:	88fb      	ldrh	r3, [r7, #6]
 80054a8:	461a      	mov	r2, r3
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f001 f999 	bl	80067e4 <UART_Start_Receive_DMA>
 80054b2:	4603      	mov	r3, r0
 80054b4:	e000      	b.n	80054b8 <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054b6:	2302      	movs	r3, #2
  }
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3728      	adds	r7, #40	; 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40008000 	.word	0x40008000

080054c4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b090      	sub	sp, #64	; 0x40
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d139      	bne.n	800555e <HAL_UART_DMAStop+0x9a>
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	2b21      	cmp	r3, #33	; 0x21
 80054ee:	d136      	bne.n	800555e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3308      	adds	r3, #8
 80054f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	e853 3f00 	ldrex	r3, [r3]
 80054fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005510:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	e841 2300 	strex	r3, r2, [r1]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1e5      	bne.n	80054f0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005530:	4618      	mov	r0, r3
 8005532:	f7fc fc3e 	bl	8001db2 <HAL_DMA_Abort>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00d      	beq.n	8005558 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005540:	4618      	mov	r0, r3
 8005542:	f7fc fda5 	bl	8002090 <HAL_DMA_GetError>
 8005546:	4603      	mov	r3, r0
 8005548:	2b20      	cmp	r3, #32
 800554a:	d105      	bne.n	8005558 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2210      	movs	r2, #16
 8005550:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e044      	b.n	80055e2 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f001 f9eb 	bl	8006934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d139      	bne.n	80055e0 <HAL_UART_DMAStop+0x11c>
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	2b22      	cmp	r3, #34	; 0x22
 8005570:	d136      	bne.n	80055e0 <HAL_UART_DMAStop+0x11c>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	60bb      	str	r3, [r7, #8]
   return(result);
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005588:	633b      	str	r3, [r7, #48]	; 0x30
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3308      	adds	r3, #8
 8005590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005592:	61ba      	str	r2, [r7, #24]
 8005594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	6979      	ldr	r1, [r7, #20]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	613b      	str	r3, [r7, #16]
   return(result);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d015      	beq.n	80055da <HAL_UART_DMAStop+0x116>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc fbfd 	bl	8001db2 <HAL_DMA_Abort>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <HAL_UART_DMAStop+0x116>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fc fd64 	bl	8002090 <HAL_DMA_GetError>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d105      	bne.n	80055da <HAL_UART_DMAStop+0x116>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2210      	movs	r2, #16
 80055d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e003      	b.n	80055e2 <HAL_UART_DMAStop+0x11e>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f001 f9eb 	bl	80069b6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80055e0:	2300      	movs	r3, #0
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3740      	adds	r7, #64	; 0x40
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b0a0      	sub	sp, #128	; 0x80
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005602:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8005606:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	461a      	mov	r2, r3
 800560e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005610:	66bb      	str	r3, [r7, #104]	; 0x68
 8005612:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005616:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005618:	e841 2300 	strex	r3, r2, [r1]
 800561c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800561e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005620:	2b00      	cmp	r3, #0
 8005622:	d1e6      	bne.n	80055f2 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	e853 3f00 	ldrex	r3, [r3]
 8005632:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	f023 5384 	bic.w	r3, r3, #276824064	; 0x10800000
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005648:	657a      	str	r2, [r7, #84]	; 0x54
 800564a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800564e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005650:	e841 2300 	strex	r3, r2, [r1]
 8005654:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1e3      	bne.n	8005624 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005660:	2b01      	cmp	r3, #1
 8005662:	d118      	bne.n	8005696 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	f023 0310 	bic.w	r3, r3, #16
 8005678:	677b      	str	r3, [r7, #116]	; 0x74
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	461a      	mov	r2, r3
 8005680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005682:	643b      	str	r3, [r7, #64]	; 0x40
 8005684:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800568a:	e841 2300 	strex	r3, r2, [r1]
 800568e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1e6      	bne.n	8005664 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b80      	cmp	r3, #128	; 0x80
 80056a2:	d137      	bne.n	8005714 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056ba:	673b      	str	r3, [r7, #112]	; 0x70
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80056c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80056c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e5      	bne.n	80056a4 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d019      	beq.n	8005714 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056e4:	2200      	movs	r2, #0
 80056e6:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fc fb60 	bl	8001db2 <HAL_DMA_Abort>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00d      	beq.n	8005714 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fc fcc7 	bl	8002090 <HAL_DMA_GetError>
 8005702:	4603      	mov	r3, r0
 8005704:	2b20      	cmp	r3, #32
 8005706:	d105      	bne.n	8005714 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2210      	movs	r2, #16
 800570c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 8005710:	2303      	movs	r3, #3
 8005712:	e06f      	b.n	80057f4 <HAL_UART_Abort+0x20a>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571e:	2b40      	cmp	r3, #64	; 0x40
 8005720:	d137      	bne.n	8005792 <HAL_UART_Abort+0x1a8>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	3308      	adds	r3, #8
 8005728:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	60bb      	str	r3, [r7, #8]
   return(result);
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3308      	adds	r3, #8
 8005740:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005742:	61ba      	str	r2, [r7, #24]
 8005744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005746:	6979      	ldr	r1, [r7, #20]
 8005748:	69ba      	ldr	r2, [r7, #24]
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	613b      	str	r3, [r7, #16]
   return(result);
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1e5      	bne.n	8005722 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d019      	beq.n	8005792 <HAL_UART_Abort+0x1a8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005762:	2200      	movs	r2, #0
 8005764:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800576a:	4618      	mov	r0, r3
 800576c:	f7fc fb21 	bl	8001db2 <HAL_DMA_Abort>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d00d      	beq.n	8005792 <HAL_UART_Abort+0x1a8>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800577a:	4618      	mov	r0, r3
 800577c:	f7fc fc88 	bl	8002090 <HAL_DMA_GetError>
 8005780:	4603      	mov	r3, r0
 8005782:	2b20      	cmp	r3, #32
 8005784:	d105      	bne.n	8005792 <HAL_UART_Abort+0x1a8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2210      	movs	r2, #16
 800578a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e030      	b.n	80057f4 <HAL_UART_Abort+0x20a>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  huart->RxXferCount = 0U;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	220f      	movs	r2, #15
 80057a8:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057b2:	d107      	bne.n	80057c4 <HAL_UART_Abort+0x1da>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	699a      	ldr	r2, [r3, #24]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0210 	orr.w	r2, r2, #16
 80057c2:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0208 	orr.w	r2, r2, #8
 80057d2:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2220      	movs	r2, #32
 80057e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	66da      	str	r2, [r3, #108]	; 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3780      	adds	r7, #128	; 0x80
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b0ba      	sub	sp, #232	; 0xe8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005822:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005826:	f640 030f 	movw	r3, #2063	; 0x80f
 800582a:	4013      	ands	r3, r2
 800582c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005834:	2b00      	cmp	r3, #0
 8005836:	d11b      	bne.n	8005870 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d015      	beq.n	8005870 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005848:	f003 0320 	and.w	r3, r3, #32
 800584c:	2b00      	cmp	r3, #0
 800584e:	d105      	bne.n	800585c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d009      	beq.n	8005870 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 82d6 	beq.w	8005e12 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	4798      	blx	r3
      }
      return;
 800586e:	e2d0      	b.n	8005e12 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 811f 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800587a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800587e:	4b8b      	ldr	r3, [pc, #556]	; (8005aac <HAL_UART_IRQHandler+0x2b0>)
 8005880:	4013      	ands	r3, r2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800588a:	4b89      	ldr	r3, [pc, #548]	; (8005ab0 <HAL_UART_IRQHandler+0x2b4>)
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 8112 	beq.w	8005ab8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d011      	beq.n	80058c4 <HAL_UART_IRQHandler+0xc8>
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00b      	beq.n	80058c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2201      	movs	r2, #1
 80058b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ba:	f043 0201 	orr.w	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d011      	beq.n	80058f4 <HAL_UART_IRQHandler+0xf8>
 80058d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00b      	beq.n	80058f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2202      	movs	r2, #2
 80058e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ea:	f043 0204 	orr.w	r2, r3, #4
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f8:	f003 0304 	and.w	r3, r3, #4
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d011      	beq.n	8005924 <HAL_UART_IRQHandler+0x128>
 8005900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005904:	f003 0301 	and.w	r3, r3, #1
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00b      	beq.n	8005924 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2204      	movs	r2, #4
 8005912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591a:	f043 0202 	orr.w	r2, r3, #2
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d017      	beq.n	8005960 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005934:	f003 0320 	and.w	r3, r3, #32
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800593c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005940:	4b5a      	ldr	r3, [pc, #360]	; (8005aac <HAL_UART_IRQHandler+0x2b0>)
 8005942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2208      	movs	r2, #8
 800594e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005956:	f043 0208 	orr.w	r2, r3, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005968:	2b00      	cmp	r3, #0
 800596a:	d012      	beq.n	8005992 <HAL_UART_IRQHandler+0x196>
 800596c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00c      	beq.n	8005992 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005998:	2b00      	cmp	r3, #0
 800599a:	f000 823c 	beq.w	8005e16 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800599e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d013      	beq.n	80059d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80059aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d105      	bne.n	80059c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80059b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d003      	beq.n	80059d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e6:	2b40      	cmp	r3, #64	; 0x40
 80059e8:	d005      	beq.n	80059f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d04f      	beq.n	8005a96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 ffdd 	bl	80069b6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a06:	2b40      	cmp	r3, #64	; 0x40
 8005a08:	d141      	bne.n	8005a8e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3308      	adds	r3, #8
 8005a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1d9      	bne.n	8005a0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d013      	beq.n	8005a86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a62:	4a14      	ldr	r2, [pc, #80]	; (8005ab4 <HAL_UART_IRQHandler+0x2b8>)
 8005a64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fc f9fa 	bl	8001e64 <HAL_DMA_Abort_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d017      	beq.n	8005aa6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005a80:	4610      	mov	r0, r2
 8005a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a84:	e00f      	b.n	8005aa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f9e4 	bl	8005e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	e00b      	b.n	8005aa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 f9e0 	bl	8005e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a94:	e007      	b.n	8005aa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f9dc 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005aa4:	e1b7      	b.n	8005e16 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aa6:	bf00      	nop
    return;
 8005aa8:	e1b5      	b.n	8005e16 <HAL_UART_IRQHandler+0x61a>
 8005aaa:	bf00      	nop
 8005aac:	10000001 	.word	0x10000001
 8005ab0:	04000120 	.word	0x04000120
 8005ab4:	08006c61 	.word	0x08006c61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	f040 814a 	bne.w	8005d56 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f000 8143 	beq.w	8005d56 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 813c 	beq.w	8005d56 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2210      	movs	r2, #16
 8005ae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af0:	2b40      	cmp	r3, #64	; 0x40
 8005af2:	f040 80b5 	bne.w	8005c60 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 8187 	beq.w	8005e1a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b16:	429a      	cmp	r2, r3
 8005b18:	f080 817f 	bcs.w	8005e1a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0320 	and.w	r3, r3, #32
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 8086 	bne.w	8005c44 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b72:	e841 2300 	strex	r3, r2, [r1]
 8005b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d1da      	bne.n	8005b38 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3308      	adds	r3, #8
 8005b88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b8c:	e853 3f00 	ldrex	r3, [r3]
 8005b90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b94:	f023 0301 	bic.w	r3, r3, #1
 8005b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ba6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005baa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e1      	bne.n	8005b82 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	3308      	adds	r3, #8
 8005bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005be4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e3      	bne.n	8005bbe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e4      	bne.n	8005c04 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fc f8b7 	bl	8001db2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f905 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c5e:	e0dc      	b.n	8005e1a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 80ce 	beq.w	8005e1e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	f000 80c9 	beq.w	8005e1e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	461a      	mov	r2, r3
 8005caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005cae:	647b      	str	r3, [r7, #68]	; 0x44
 8005cb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e4      	bne.n	8005c8c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005cea:	633a      	str	r2, [r7, #48]	; 0x30
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e1      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f023 0310 	bic.w	r3, r3, #16
 8005d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d38:	69b9      	ldr	r1, [r7, #24]
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	e841 2300 	strex	r3, r2, [r1]
 8005d40:	617b      	str	r3, [r7, #20]
   return(result);
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1e4      	bne.n	8005d12 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f88a 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d54:	e063      	b.n	8005e1e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_UART_IRQHandler+0x584>
 8005d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d008      	beq.n	8005d80 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 ffb2 	bl	8006ce2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d7e:	e051      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d014      	beq.n	8005db6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03a      	beq.n	8005e22 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	4798      	blx	r3
    }
    return;
 8005db4:	e035      	b.n	8005e22 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d009      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5da>
 8005dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d003      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 ff5c 	bl	8006c8c <UART_EndTransmit_IT>
    return;
 8005dd4:	e026      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_UART_IRQHandler+0x5fa>
 8005de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 ff8b 	bl	8006d0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df4:	e016      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d010      	beq.n	8005e24 <HAL_UART_IRQHandler+0x628>
 8005e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	da0c      	bge.n	8005e24 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 ff73 	bl	8006cf6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e10:	e008      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
      return;
 8005e12:	bf00      	nop
 8005e14:	e006      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
    return;
 8005e16:	bf00      	nop
 8005e18:	e004      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
      return;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
      return;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <HAL_UART_IRQHandler+0x628>
    return;
 8005e22:	bf00      	nop
  }
}
 8005e24:	37e8      	adds	r7, #232	; 0xe8
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop

08005e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e84:	b08c      	sub	sp, #48	; 0x30
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	691b      	ldr	r3, [r3, #16]
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	4313      	orrs	r3, r2
 8005ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4baa      	ldr	r3, [pc, #680]	; (8006158 <UART_SetConfig+0x2d8>)
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	6812      	ldr	r2, [r2, #0]
 8005eb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005eb8:	430b      	orrs	r3, r1
 8005eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	699b      	ldr	r3, [r3, #24]
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a9f      	ldr	r2, [pc, #636]	; (800615c <UART_SetConfig+0x2dc>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6a1b      	ldr	r3, [r3, #32]
 8005ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ef6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	6812      	ldr	r2, [r2, #0]
 8005efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f00:	430b      	orrs	r3, r1
 8005f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0a:	f023 010f 	bic.w	r1, r3, #15
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a90      	ldr	r2, [pc, #576]	; (8006160 <UART_SetConfig+0x2e0>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d125      	bne.n	8005f70 <UART_SetConfig+0xf0>
 8005f24:	4b8f      	ldr	r3, [pc, #572]	; (8006164 <UART_SetConfig+0x2e4>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d81a      	bhi.n	8005f68 <UART_SetConfig+0xe8>
 8005f32:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <UART_SetConfig+0xb8>)
 8005f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f38:	08005f49 	.word	0x08005f49
 8005f3c:	08005f59 	.word	0x08005f59
 8005f40:	08005f51 	.word	0x08005f51
 8005f44:	08005f61 	.word	0x08005f61
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4e:	e116      	b.n	800617e <UART_SetConfig+0x2fe>
 8005f50:	2302      	movs	r3, #2
 8005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f56:	e112      	b.n	800617e <UART_SetConfig+0x2fe>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f5e:	e10e      	b.n	800617e <UART_SetConfig+0x2fe>
 8005f60:	2308      	movs	r3, #8
 8005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f66:	e10a      	b.n	800617e <UART_SetConfig+0x2fe>
 8005f68:	2310      	movs	r3, #16
 8005f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f6e:	e106      	b.n	800617e <UART_SetConfig+0x2fe>
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a7c      	ldr	r2, [pc, #496]	; (8006168 <UART_SetConfig+0x2e8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d138      	bne.n	8005fec <UART_SetConfig+0x16c>
 8005f7a:	4b7a      	ldr	r3, [pc, #488]	; (8006164 <UART_SetConfig+0x2e4>)
 8005f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f80:	f003 030c 	and.w	r3, r3, #12
 8005f84:	2b0c      	cmp	r3, #12
 8005f86:	d82d      	bhi.n	8005fe4 <UART_SetConfig+0x164>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <UART_SetConfig+0x110>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	08005fe5 	.word	0x08005fe5
 8005f98:	08005fe5 	.word	0x08005fe5
 8005f9c:	08005fe5 	.word	0x08005fe5
 8005fa0:	08005fd5 	.word	0x08005fd5
 8005fa4:	08005fe5 	.word	0x08005fe5
 8005fa8:	08005fe5 	.word	0x08005fe5
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08005fcd 	.word	0x08005fcd
 8005fb4:	08005fe5 	.word	0x08005fe5
 8005fb8:	08005fe5 	.word	0x08005fe5
 8005fbc:	08005fe5 	.word	0x08005fe5
 8005fc0:	08005fdd 	.word	0x08005fdd
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fca:	e0d8      	b.n	800617e <UART_SetConfig+0x2fe>
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fd2:	e0d4      	b.n	800617e <UART_SetConfig+0x2fe>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fda:	e0d0      	b.n	800617e <UART_SetConfig+0x2fe>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe2:	e0cc      	b.n	800617e <UART_SetConfig+0x2fe>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fea:	e0c8      	b.n	800617e <UART_SetConfig+0x2fe>
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a5e      	ldr	r2, [pc, #376]	; (800616c <UART_SetConfig+0x2ec>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d125      	bne.n	8006042 <UART_SetConfig+0x1c2>
 8005ff6:	4b5b      	ldr	r3, [pc, #364]	; (8006164 <UART_SetConfig+0x2e4>)
 8005ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006000:	2b30      	cmp	r3, #48	; 0x30
 8006002:	d016      	beq.n	8006032 <UART_SetConfig+0x1b2>
 8006004:	2b30      	cmp	r3, #48	; 0x30
 8006006:	d818      	bhi.n	800603a <UART_SetConfig+0x1ba>
 8006008:	2b20      	cmp	r3, #32
 800600a:	d00a      	beq.n	8006022 <UART_SetConfig+0x1a2>
 800600c:	2b20      	cmp	r3, #32
 800600e:	d814      	bhi.n	800603a <UART_SetConfig+0x1ba>
 8006010:	2b00      	cmp	r3, #0
 8006012:	d002      	beq.n	800601a <UART_SetConfig+0x19a>
 8006014:	2b10      	cmp	r3, #16
 8006016:	d008      	beq.n	800602a <UART_SetConfig+0x1aa>
 8006018:	e00f      	b.n	800603a <UART_SetConfig+0x1ba>
 800601a:	2300      	movs	r3, #0
 800601c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006020:	e0ad      	b.n	800617e <UART_SetConfig+0x2fe>
 8006022:	2302      	movs	r3, #2
 8006024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006028:	e0a9      	b.n	800617e <UART_SetConfig+0x2fe>
 800602a:	2304      	movs	r3, #4
 800602c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006030:	e0a5      	b.n	800617e <UART_SetConfig+0x2fe>
 8006032:	2308      	movs	r3, #8
 8006034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006038:	e0a1      	b.n	800617e <UART_SetConfig+0x2fe>
 800603a:	2310      	movs	r3, #16
 800603c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006040:	e09d      	b.n	800617e <UART_SetConfig+0x2fe>
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a4a      	ldr	r2, [pc, #296]	; (8006170 <UART_SetConfig+0x2f0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d125      	bne.n	8006098 <UART_SetConfig+0x218>
 800604c:	4b45      	ldr	r3, [pc, #276]	; (8006164 <UART_SetConfig+0x2e4>)
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006052:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006056:	2bc0      	cmp	r3, #192	; 0xc0
 8006058:	d016      	beq.n	8006088 <UART_SetConfig+0x208>
 800605a:	2bc0      	cmp	r3, #192	; 0xc0
 800605c:	d818      	bhi.n	8006090 <UART_SetConfig+0x210>
 800605e:	2b80      	cmp	r3, #128	; 0x80
 8006060:	d00a      	beq.n	8006078 <UART_SetConfig+0x1f8>
 8006062:	2b80      	cmp	r3, #128	; 0x80
 8006064:	d814      	bhi.n	8006090 <UART_SetConfig+0x210>
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <UART_SetConfig+0x1f0>
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d008      	beq.n	8006080 <UART_SetConfig+0x200>
 800606e:	e00f      	b.n	8006090 <UART_SetConfig+0x210>
 8006070:	2300      	movs	r3, #0
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e082      	b.n	800617e <UART_SetConfig+0x2fe>
 8006078:	2302      	movs	r3, #2
 800607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800607e:	e07e      	b.n	800617e <UART_SetConfig+0x2fe>
 8006080:	2304      	movs	r3, #4
 8006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006086:	e07a      	b.n	800617e <UART_SetConfig+0x2fe>
 8006088:	2308      	movs	r3, #8
 800608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800608e:	e076      	b.n	800617e <UART_SetConfig+0x2fe>
 8006090:	2310      	movs	r3, #16
 8006092:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006096:	e072      	b.n	800617e <UART_SetConfig+0x2fe>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a35      	ldr	r2, [pc, #212]	; (8006174 <UART_SetConfig+0x2f4>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d12a      	bne.n	80060f8 <UART_SetConfig+0x278>
 80060a2:	4b30      	ldr	r3, [pc, #192]	; (8006164 <UART_SetConfig+0x2e4>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b0:	d01a      	beq.n	80060e8 <UART_SetConfig+0x268>
 80060b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060b6:	d81b      	bhi.n	80060f0 <UART_SetConfig+0x270>
 80060b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060bc:	d00c      	beq.n	80060d8 <UART_SetConfig+0x258>
 80060be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060c2:	d815      	bhi.n	80060f0 <UART_SetConfig+0x270>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <UART_SetConfig+0x250>
 80060c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060cc:	d008      	beq.n	80060e0 <UART_SetConfig+0x260>
 80060ce:	e00f      	b.n	80060f0 <UART_SetConfig+0x270>
 80060d0:	2300      	movs	r3, #0
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e052      	b.n	800617e <UART_SetConfig+0x2fe>
 80060d8:	2302      	movs	r3, #2
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060de:	e04e      	b.n	800617e <UART_SetConfig+0x2fe>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e6:	e04a      	b.n	800617e <UART_SetConfig+0x2fe>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ee:	e046      	b.n	800617e <UART_SetConfig+0x2fe>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060f6:	e042      	b.n	800617e <UART_SetConfig+0x2fe>
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a17      	ldr	r2, [pc, #92]	; (800615c <UART_SetConfig+0x2dc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d13a      	bne.n	8006178 <UART_SetConfig+0x2f8>
 8006102:	4b18      	ldr	r3, [pc, #96]	; (8006164 <UART_SetConfig+0x2e4>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800610c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006110:	d01a      	beq.n	8006148 <UART_SetConfig+0x2c8>
 8006112:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006116:	d81b      	bhi.n	8006150 <UART_SetConfig+0x2d0>
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800611c:	d00c      	beq.n	8006138 <UART_SetConfig+0x2b8>
 800611e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006122:	d815      	bhi.n	8006150 <UART_SetConfig+0x2d0>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <UART_SetConfig+0x2b0>
 8006128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800612c:	d008      	beq.n	8006140 <UART_SetConfig+0x2c0>
 800612e:	e00f      	b.n	8006150 <UART_SetConfig+0x2d0>
 8006130:	2300      	movs	r3, #0
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006136:	e022      	b.n	800617e <UART_SetConfig+0x2fe>
 8006138:	2302      	movs	r3, #2
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613e:	e01e      	b.n	800617e <UART_SetConfig+0x2fe>
 8006140:	2304      	movs	r3, #4
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006146:	e01a      	b.n	800617e <UART_SetConfig+0x2fe>
 8006148:	2308      	movs	r3, #8
 800614a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800614e:	e016      	b.n	800617e <UART_SetConfig+0x2fe>
 8006150:	2310      	movs	r3, #16
 8006152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006156:	e012      	b.n	800617e <UART_SetConfig+0x2fe>
 8006158:	cfff69f3 	.word	0xcfff69f3
 800615c:	40008000 	.word	0x40008000
 8006160:	40013800 	.word	0x40013800
 8006164:	40021000 	.word	0x40021000
 8006168:	40004400 	.word	0x40004400
 800616c:	40004800 	.word	0x40004800
 8006170:	40004c00 	.word	0x40004c00
 8006174:	40005000 	.word	0x40005000
 8006178:	2310      	movs	r3, #16
 800617a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4aae      	ldr	r2, [pc, #696]	; (800643c <UART_SetConfig+0x5bc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	f040 8097 	bne.w	80062b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800618a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800618e:	2b08      	cmp	r3, #8
 8006190:	d823      	bhi.n	80061da <UART_SetConfig+0x35a>
 8006192:	a201      	add	r2, pc, #4	; (adr r2, 8006198 <UART_SetConfig+0x318>)
 8006194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006198:	080061bd 	.word	0x080061bd
 800619c:	080061db 	.word	0x080061db
 80061a0:	080061c5 	.word	0x080061c5
 80061a4:	080061db 	.word	0x080061db
 80061a8:	080061cb 	.word	0x080061cb
 80061ac:	080061db 	.word	0x080061db
 80061b0:	080061db 	.word	0x080061db
 80061b4:	080061db 	.word	0x080061db
 80061b8:	080061d3 	.word	0x080061d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061bc:	f7fd fb46 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061c2:	e010      	b.n	80061e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c4:	4b9e      	ldr	r3, [pc, #632]	; (8006440 <UART_SetConfig+0x5c0>)
 80061c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061c8:	e00d      	b.n	80061e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ca:	f7fd fad1 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 80061ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061d0:	e009      	b.n	80061e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061d8:	e005      	b.n	80061e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	f000 8130 	beq.w	800644e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	4a94      	ldr	r2, [pc, #592]	; (8006444 <UART_SetConfig+0x5c4>)
 80061f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f8:	461a      	mov	r2, r3
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006200:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	4613      	mov	r3, r2
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	4413      	add	r3, r2
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	429a      	cmp	r2, r3
 8006210:	d305      	bcc.n	800621e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	429a      	cmp	r2, r3
 800621c:	d903      	bls.n	8006226 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006224:	e113      	b.n	800644e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006228:	2200      	movs	r2, #0
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	60fa      	str	r2, [r7, #12]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	4a84      	ldr	r2, [pc, #528]	; (8006444 <UART_SetConfig+0x5c4>)
 8006234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006238:	b29b      	uxth	r3, r3
 800623a:	2200      	movs	r2, #0
 800623c:	603b      	str	r3, [r7, #0]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006248:	f7f9 ffe6 	bl	8000218 <__aeabi_uldivmod>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	4610      	mov	r0, r2
 8006252:	4619      	mov	r1, r3
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	020b      	lsls	r3, r1, #8
 800625e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006262:	0202      	lsls	r2, r0, #8
 8006264:	6979      	ldr	r1, [r7, #20]
 8006266:	6849      	ldr	r1, [r1, #4]
 8006268:	0849      	lsrs	r1, r1, #1
 800626a:	2000      	movs	r0, #0
 800626c:	460c      	mov	r4, r1
 800626e:	4605      	mov	r5, r0
 8006270:	eb12 0804 	adds.w	r8, r2, r4
 8006274:	eb43 0905 	adc.w	r9, r3, r5
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	469a      	mov	sl, r3
 8006280:	4693      	mov	fp, r2
 8006282:	4652      	mov	r2, sl
 8006284:	465b      	mov	r3, fp
 8006286:	4640      	mov	r0, r8
 8006288:	4649      	mov	r1, r9
 800628a:	f7f9 ffc5 	bl	8000218 <__aeabi_uldivmod>
 800628e:	4602      	mov	r2, r0
 8006290:	460b      	mov	r3, r1
 8006292:	4613      	mov	r3, r2
 8006294:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800629c:	d308      	bcc.n	80062b0 <UART_SetConfig+0x430>
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062a4:	d204      	bcs.n	80062b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	6a3a      	ldr	r2, [r7, #32]
 80062ac:	60da      	str	r2, [r3, #12]
 80062ae:	e0ce      	b.n	800644e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062b6:	e0ca      	b.n	800644e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	69db      	ldr	r3, [r3, #28]
 80062bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c0:	d166      	bne.n	8006390 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80062c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d827      	bhi.n	800631a <UART_SetConfig+0x49a>
 80062ca:	a201      	add	r2, pc, #4	; (adr r2, 80062d0 <UART_SetConfig+0x450>)
 80062cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d0:	080062f5 	.word	0x080062f5
 80062d4:	080062fd 	.word	0x080062fd
 80062d8:	08006305 	.word	0x08006305
 80062dc:	0800631b 	.word	0x0800631b
 80062e0:	0800630b 	.word	0x0800630b
 80062e4:	0800631b 	.word	0x0800631b
 80062e8:	0800631b 	.word	0x0800631b
 80062ec:	0800631b 	.word	0x0800631b
 80062f0:	08006313 	.word	0x08006313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062f4:	f7fd faaa 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 80062f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062fa:	e014      	b.n	8006326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062fc:	f7fd fabc 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006302:	e010      	b.n	8006326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006304:	4b4e      	ldr	r3, [pc, #312]	; (8006440 <UART_SetConfig+0x5c0>)
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006308:	e00d      	b.n	8006326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800630a:	f7fd fa31 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800630e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006310:	e009      	b.n	8006326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006316:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006318:	e005      	b.n	8006326 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800631a:	2300      	movs	r3, #0
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8090 	beq.w	800644e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006332:	4a44      	ldr	r2, [pc, #272]	; (8006444 <UART_SetConfig+0x5c4>)
 8006334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006338:	461a      	mov	r2, r3
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006340:	005a      	lsls	r2, r3, #1
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	085b      	lsrs	r3, r3, #1
 8006348:	441a      	add	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006352:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006354:	6a3b      	ldr	r3, [r7, #32]
 8006356:	2b0f      	cmp	r3, #15
 8006358:	d916      	bls.n	8006388 <UART_SetConfig+0x508>
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006360:	d212      	bcs.n	8006388 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	b29b      	uxth	r3, r3
 8006366:	f023 030f 	bic.w	r3, r3, #15
 800636a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800636c:	6a3b      	ldr	r3, [r7, #32]
 800636e:	085b      	lsrs	r3, r3, #1
 8006370:	b29b      	uxth	r3, r3
 8006372:	f003 0307 	and.w	r3, r3, #7
 8006376:	b29a      	uxth	r2, r3
 8006378:	8bfb      	ldrh	r3, [r7, #30]
 800637a:	4313      	orrs	r3, r2
 800637c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	8bfa      	ldrh	r2, [r7, #30]
 8006384:	60da      	str	r2, [r3, #12]
 8006386:	e062      	b.n	800644e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800638e:	e05e      	b.n	800644e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006390:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006394:	2b08      	cmp	r3, #8
 8006396:	d828      	bhi.n	80063ea <UART_SetConfig+0x56a>
 8006398:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <UART_SetConfig+0x520>)
 800639a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639e:	bf00      	nop
 80063a0:	080063c5 	.word	0x080063c5
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063d5 	.word	0x080063d5
 80063ac:	080063eb 	.word	0x080063eb
 80063b0:	080063db 	.word	0x080063db
 80063b4:	080063eb 	.word	0x080063eb
 80063b8:	080063eb 	.word	0x080063eb
 80063bc:	080063eb 	.word	0x080063eb
 80063c0:	080063e3 	.word	0x080063e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063c4:	f7fd fa42 	bl	800384c <HAL_RCC_GetPCLK1Freq>
 80063c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063ca:	e014      	b.n	80063f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063cc:	f7fd fa54 	bl	8003878 <HAL_RCC_GetPCLK2Freq>
 80063d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063d2:	e010      	b.n	80063f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063d4:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <UART_SetConfig+0x5c0>)
 80063d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063d8:	e00d      	b.n	80063f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063da:	f7fd f9c9 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 80063de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063e0:	e009      	b.n	80063f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063e8:	e005      	b.n	80063f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80063ea:	2300      	movs	r3, #0
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063f4:	bf00      	nop
    }

    if (pclk != 0U)
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d028      	beq.n	800644e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006400:	4a10      	ldr	r2, [pc, #64]	; (8006444 <UART_SetConfig+0x5c4>)
 8006402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006406:	461a      	mov	r2, r3
 8006408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640a:	fbb3 f2f2 	udiv	r2, r3, r2
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	085b      	lsrs	r3, r3, #1
 8006414:	441a      	add	r2, r3
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	fbb2 f3f3 	udiv	r3, r2, r3
 800641e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	2b0f      	cmp	r3, #15
 8006424:	d910      	bls.n	8006448 <UART_SetConfig+0x5c8>
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800642c:	d20c      	bcs.n	8006448 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	b29a      	uxth	r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60da      	str	r2, [r3, #12]
 8006438:	e009      	b.n	800644e <UART_SetConfig+0x5ce>
 800643a:	bf00      	nop
 800643c:	40008000 	.word	0x40008000
 8006440:	00f42400 	.word	0x00f42400
 8006444:	080071d8 	.word	0x080071d8
      }
      else
      {
        ret = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2201      	movs	r2, #1
 8006452:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2201      	movs	r2, #1
 800645a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	2200      	movs	r2, #0
 8006462:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	2200      	movs	r2, #0
 8006468:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800646a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800646e:	4618      	mov	r0, r3
 8006470:	3730      	adds	r7, #48	; 0x30
 8006472:	46bd      	mov	sp, r7
 8006474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006484:	f003 0301 	and.w	r3, r3, #1
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00a      	beq.n	80064a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	430a      	orrs	r2, r1
 80064a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	f003 0302 	and.w	r3, r3, #2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	430a      	orrs	r2, r1
 80064c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00a      	beq.n	80064e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	430a      	orrs	r2, r1
 80064e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00a      	beq.n	8006508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	430a      	orrs	r2, r1
 8006506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650c:	f003 0310 	and.w	r3, r3, #16
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00a      	beq.n	800652a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	430a      	orrs	r2, r1
 8006528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d00a      	beq.n	800654c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	430a      	orrs	r2, r1
 800654a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01a      	beq.n	800658e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006576:	d10a      	bne.n	800658e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	430a      	orrs	r2, r1
 800658c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006596:	2b00      	cmp	r3, #0
 8006598:	d00a      	beq.n	80065b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	430a      	orrs	r2, r1
 80065ae:	605a      	str	r2, [r3, #4]
  }
}
 80065b0:	bf00      	nop
 80065b2:	370c      	adds	r7, #12
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065cc:	f7fb f990 	bl	80018f0 <HAL_GetTick>
 80065d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0308 	and.w	r3, r3, #8
 80065dc:	2b08      	cmp	r3, #8
 80065de:	d10e      	bne.n	80065fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f82f 	bl	8006652 <UART_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e025      	b.n	800664a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b04      	cmp	r3, #4
 800660a:	d10e      	bne.n	800662a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f819 	bl	8006652 <UART_WaitOnFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006626:	2303      	movs	r3, #3
 8006628:	e00f      	b.n	800664a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b09c      	sub	sp, #112	; 0x70
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	603b      	str	r3, [r7, #0]
 800665e:	4613      	mov	r3, r2
 8006660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006662:	e0a9      	b.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666a:	f000 80a5 	beq.w	80067b8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fb f93f 	bl	80018f0 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <UART_WaitOnFlagUntilTimeout+0x32>
 800667e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006680:	2b00      	cmp	r3, #0
 8006682:	d140      	bne.n	8006706 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006694:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006698:	667b      	str	r3, [r7, #100]	; 0x64
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80066a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80066b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c8:	f023 0301 	bic.w	r3, r3, #1
 80066cc:	663b      	str	r3, [r7, #96]	; 0x60
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80066d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2220      	movs	r2, #32
 80066f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e069      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d051      	beq.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800671e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006722:	d149      	bne.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800672c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006742:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	461a      	mov	r2, r3
 800674a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674c:	637b      	str	r3, [r7, #52]	; 0x34
 800674e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e6      	bne.n	800672e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3308      	adds	r3, #8
 8006766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	613b      	str	r3, [r7, #16]
   return(result);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	66bb      	str	r3, [r7, #104]	; 0x68
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3308      	adds	r3, #8
 800677e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006780:	623a      	str	r2, [r7, #32]
 8006782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	69f9      	ldr	r1, [r7, #28]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	61bb      	str	r3, [r7, #24]
   return(result);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e5      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e010      	b.n	80067da <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69da      	ldr	r2, [r3, #28]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	bf0c      	ite	eq
 80067c8:	2301      	moveq	r3, #1
 80067ca:	2300      	movne	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	79fb      	ldrb	r3, [r7, #7]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	f43f af46 	beq.w	8006664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3770      	adds	r7, #112	; 0x70
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b096      	sub	sp, #88	; 0x58
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	4613      	mov	r3, r2
 80067f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2222      	movs	r2, #34	; 0x22
 800680c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006814:	2b00      	cmp	r3, #0
 8006816:	d02c      	beq.n	8006872 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800681c:	4a42      	ldr	r2, [pc, #264]	; (8006928 <UART_Start_Receive_DMA+0x144>)
 800681e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006824:	4a41      	ldr	r2, [pc, #260]	; (800692c <UART_Start_Receive_DMA+0x148>)
 8006826:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800682c:	4a40      	ldr	r2, [pc, #256]	; (8006930 <UART_Start_Receive_DMA+0x14c>)
 800682e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006834:	2200      	movs	r2, #0
 8006836:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3324      	adds	r3, #36	; 0x24
 8006842:	4619      	mov	r1, r3
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006848:	461a      	mov	r2, r3
 800684a:	88fb      	ldrh	r3, [r7, #6]
 800684c:	f7fb fa36 	bl	8001cbc <HAL_DMA_Start_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2210      	movs	r2, #16
 800685a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2220      	movs	r2, #32
 800686a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e055      	b.n	800691e <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d018      	beq.n	80068b4 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006896:	657b      	str	r3, [r7, #84]	; 0x54
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	461a      	mov	r2, r3
 800689e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e6      	bne.n	8006882 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3308      	adds	r3, #8
 80068ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	653b      	str	r3, [r7, #80]	; 0x50
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3308      	adds	r3, #8
 80068d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068d4:	637a      	str	r2, [r7, #52]	; 0x34
 80068d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3308      	adds	r3, #8
 80068ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	e853 3f00 	ldrex	r3, [r3]
 80068f6:	613b      	str	r3, [r7, #16]
   return(result);
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3308      	adds	r3, #8
 8006906:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006908:	623a      	str	r2, [r7, #32]
 800690a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690c:	69f9      	ldr	r1, [r7, #28]
 800690e:	6a3a      	ldr	r2, [r7, #32]
 8006910:	e841 2300 	strex	r3, r2, [r1]
 8006914:	61bb      	str	r3, [r7, #24]
   return(result);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e5      	bne.n	80068e8 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3758      	adds	r7, #88	; 0x58
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	08006a83 	.word	0x08006a83
 800692c:	08006ba9 	.word	0x08006ba9
 8006930:	08006be1 	.word	0x08006be1

08006934 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006934:	b480      	push	{r7}
 8006936:	b08f      	sub	sp, #60	; 0x3c
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	e853 3f00 	ldrex	r3, [r3]
 8006948:	61fb      	str	r3, [r7, #28]
   return(result);
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006950:	637b      	str	r3, [r7, #52]	; 0x34
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800695a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800695c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006962:	e841 2300 	strex	r3, r2, [r1]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	2b00      	cmp	r3, #0
 800696c:	d1e6      	bne.n	800693c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	e853 3f00 	ldrex	r3, [r3]
 800697c:	60bb      	str	r3, [r7, #8]
   return(result);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006984:	633b      	str	r3, [r7, #48]	; 0x30
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800698e:	61ba      	str	r2, [r7, #24]
 8006990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006992:	6979      	ldr	r1, [r7, #20]
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	e841 2300 	strex	r3, r2, [r1]
 800699a:	613b      	str	r3, [r7, #16]
   return(result);
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1e5      	bne.n	800696e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 80069aa:	bf00      	nop
 80069ac:	373c      	adds	r7, #60	; 0x3c
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069b6:	b480      	push	{r7}
 80069b8:	b095      	sub	sp, #84	; 0x54
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	461a      	mov	r2, r3
 80069da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069dc:	643b      	str	r3, [r7, #64]	; 0x40
 80069de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e6      	bne.n	80069be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	3308      	adds	r3, #8
 80069f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f8:	6a3b      	ldr	r3, [r7, #32]
 80069fa:	e853 3f00 	ldrex	r3, [r3]
 80069fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a06:	f023 0301 	bic.w	r3, r3, #1
 8006a0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3308      	adds	r3, #8
 8006a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e3      	bne.n	80069f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d118      	bne.n	8006a62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	e853 3f00 	ldrex	r3, [r3]
 8006a3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	f023 0310 	bic.w	r3, r3, #16
 8006a44:	647b      	str	r3, [r7, #68]	; 0x44
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a52:	6979      	ldr	r1, [r7, #20]
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	e841 2300 	strex	r3, r2, [r1]
 8006a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e6      	bne.n	8006a30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006a76:	bf00      	nop
 8006a78:	3754      	adds	r7, #84	; 0x54
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b09c      	sub	sp, #112	; 0x70
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0320 	and.w	r3, r3, #32
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d171      	bne.n	8006b82 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aae:	e853 3f00 	ldrex	r3, [r3]
 8006ab2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8006abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ac4:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006aca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006acc:	e841 2300 	strex	r3, r2, [r1]
 8006ad0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e6      	bne.n	8006aa6 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	667b      	str	r3, [r7, #100]	; 0x64
 8006af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	3308      	adds	r3, #8
 8006af6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006af8:	647a      	str	r2, [r7, #68]	; 0x44
 8006afa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006afe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e5      	bne.n	8006ad8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	623b      	str	r3, [r7, #32]
   return(result);
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b22:	663b      	str	r3, [r7, #96]	; 0x60
 8006b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b2c:	633a      	str	r2, [r7, #48]	; 0x30
 8006b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b42:	2220      	movs	r2, #32
 8006b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d118      	bne.n	8006b82 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f023 0310 	bic.w	r3, r3, #16
 8006b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b6e:	61fb      	str	r3, [r7, #28]
 8006b70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b72:	69b9      	ldr	r1, [r7, #24]
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	e841 2300 	strex	r3, r2, [r1]
 8006b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1e6      	bne.n	8006b50 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b90:	4619      	mov	r1, r3
 8006b92:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b94:	f7ff f968 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b98:	e002      	b.n	8006ba0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006b9a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b9c:	f7f9 fdea 	bl	8000774 <HAL_UART_RxCpltCallback>
}
 8006ba0:	bf00      	nop
 8006ba2:	3770      	adds	r7, #112	; 0x70
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d109      	bne.n	8006bd2 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bc4:	085b      	lsrs	r3, r3, #1
 8006bc6:	b29b      	uxth	r3, r3
 8006bc8:	4619      	mov	r1, r3
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f7ff f94c 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bd0:	e002      	b.n	8006bd8 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7ff f934 	bl	8005e40 <HAL_UART_RxHalfCpltCallback>
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c08:	2b80      	cmp	r3, #128	; 0x80
 8006c0a:	d109      	bne.n	8006c20 <UART_DMAError+0x40>
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b21      	cmp	r3, #33	; 0x21
 8006c10:	d106      	bne.n	8006c20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006c1a:	6978      	ldr	r0, [r7, #20]
 8006c1c:	f7ff fe8a 	bl	8006934 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c2a:	2b40      	cmp	r3, #64	; 0x40
 8006c2c:	d109      	bne.n	8006c42 <UART_DMAError+0x62>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b22      	cmp	r3, #34	; 0x22
 8006c32:	d106      	bne.n	8006c42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006c3c:	6978      	ldr	r0, [r7, #20]
 8006c3e:	f7ff feba 	bl	80069b6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c48:	f043 0210 	orr.w	r2, r3, #16
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c52:	6978      	ldr	r0, [r7, #20]
 8006c54:	f7ff f8fe 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c58:	bf00      	nop
 8006c5a:	3718      	adds	r7, #24
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c7e:	68f8      	ldr	r0, [r7, #12]
 8006c80:	f7ff f8e8 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c84:	bf00      	nop
 8006c86:	3710      	adds	r7, #16
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	69fb      	ldr	r3, [r7, #28]
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e6      	bne.n	8006c94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f7ff f8a9 	bl	8005e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cda:	bf00      	nop
 8006cdc:	3720      	adds	r7, #32
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006cfe:	bf00      	nop
 8006d00:	370c      	adds	r7, #12
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b085      	sub	sp, #20
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d101      	bne.n	8006d34 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d30:	2302      	movs	r3, #2
 8006d32:	e027      	b.n	8006d84 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2224      	movs	r2, #36	; 0x24
 8006d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0201 	bic.w	r2, r2, #1
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2220      	movs	r2, #32
 8006d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d101      	bne.n	8006da8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006da4:	2302      	movs	r3, #2
 8006da6:	e02d      	b.n	8006e04 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2224      	movs	r2, #36	; 0x24
 8006db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0201 	bic.w	r2, r2, #1
 8006dce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 f84f 	bl	8006e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2220      	movs	r2, #32
 8006df6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e02d      	b.n	8006e80 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2224      	movs	r2, #36	; 0x24
 8006e30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0201 	bic.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	430a      	orrs	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f811 	bl	8006e88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d108      	bne.n	8006eaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ea8:	e031      	b.n	8006f0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006eaa:	2308      	movs	r3, #8
 8006eac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eae:	2308      	movs	r3, #8
 8006eb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	0e5b      	lsrs	r3, r3, #25
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	0f5b      	lsrs	r3, r3, #29
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	7b3a      	ldrb	r2, [r7, #12]
 8006ed6:	4911      	ldr	r1, [pc, #68]	; (8006f1c <UARTEx_SetNbDataToProcess+0x94>)
 8006ed8:	5c8a      	ldrb	r2, [r1, r2]
 8006eda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ede:	7b3a      	ldrb	r2, [r7, #12]
 8006ee0:	490f      	ldr	r1, [pc, #60]	; (8006f20 <UARTEx_SetNbDataToProcess+0x98>)
 8006ee2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ee4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	7b7a      	ldrb	r2, [r7, #13]
 8006ef4:	4909      	ldr	r1, [pc, #36]	; (8006f1c <UARTEx_SetNbDataToProcess+0x94>)
 8006ef6:	5c8a      	ldrb	r2, [r1, r2]
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006efc:	7b7a      	ldrb	r2, [r7, #13]
 8006efe:	4908      	ldr	r1, [pc, #32]	; (8006f20 <UARTEx_SetNbDataToProcess+0x98>)
 8006f00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f02:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f0e:	bf00      	nop
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	080071f0 	.word	0x080071f0
 8006f20:	080071f8 	.word	0x080071f8

08006f24 <__libc_init_array>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	4d0d      	ldr	r5, [pc, #52]	; (8006f5c <__libc_init_array+0x38>)
 8006f28:	4c0d      	ldr	r4, [pc, #52]	; (8006f60 <__libc_init_array+0x3c>)
 8006f2a:	1b64      	subs	r4, r4, r5
 8006f2c:	10a4      	asrs	r4, r4, #2
 8006f2e:	2600      	movs	r6, #0
 8006f30:	42a6      	cmp	r6, r4
 8006f32:	d109      	bne.n	8006f48 <__libc_init_array+0x24>
 8006f34:	4d0b      	ldr	r5, [pc, #44]	; (8006f64 <__libc_init_array+0x40>)
 8006f36:	4c0c      	ldr	r4, [pc, #48]	; (8006f68 <__libc_init_array+0x44>)
 8006f38:	f000 f82e 	bl	8006f98 <_init>
 8006f3c:	1b64      	subs	r4, r4, r5
 8006f3e:	10a4      	asrs	r4, r4, #2
 8006f40:	2600      	movs	r6, #0
 8006f42:	42a6      	cmp	r6, r4
 8006f44:	d105      	bne.n	8006f52 <__libc_init_array+0x2e>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4c:	4798      	blx	r3
 8006f4e:	3601      	adds	r6, #1
 8006f50:	e7ee      	b.n	8006f30 <__libc_init_array+0xc>
 8006f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f56:	4798      	blx	r3
 8006f58:	3601      	adds	r6, #1
 8006f5a:	e7f2      	b.n	8006f42 <__libc_init_array+0x1e>
 8006f5c:	08007208 	.word	0x08007208
 8006f60:	08007208 	.word	0x08007208
 8006f64:	08007208 	.word	0x08007208
 8006f68:	0800720c 	.word	0x0800720c

08006f6c <memcpy>:
 8006f6c:	440a      	add	r2, r1
 8006f6e:	4291      	cmp	r1, r2
 8006f70:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f74:	d100      	bne.n	8006f78 <memcpy+0xc>
 8006f76:	4770      	bx	lr
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f82:	4291      	cmp	r1, r2
 8006f84:	d1f9      	bne.n	8006f7a <memcpy+0xe>
 8006f86:	bd10      	pop	{r4, pc}

08006f88 <memset>:
 8006f88:	4402      	add	r2, r0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d100      	bne.n	8006f92 <memset+0xa>
 8006f90:	4770      	bx	lr
 8006f92:	f803 1b01 	strb.w	r1, [r3], #1
 8006f96:	e7f9      	b.n	8006f8c <memset+0x4>

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
